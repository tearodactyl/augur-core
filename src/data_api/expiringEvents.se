# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setController:[address]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, suicideFunds:[address]:_, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

EVENTS = self.controller.lookup('events')
extern events: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, addReportersPaidSoFar:[int256]:int256, getBond:[int256]:int256, getChallenged:[int256]:int256, getCreationTime:[int256]:int256, getEarlyResolutionBond:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventInfo:[int256]:int256[], getEventPushedUp:[int256]:int256, getEventResolution:[int256]:bytes, getExpiration:[int256]:int256, getExtraBond:[int256]:int256, getExtraBondPoster:[int256]:int256, getFirstPreliminaryOutcome:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForkResolveAddress:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getMode:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportersPaidSoFar:[int256]:int256, getReportingThreshold:[int256]:int256, getResolutionAddress:[int256]:int256, getResolutionLength:[int256]:int256, getResolveBondPoster:[int256]:int256, getUncaughtOutcome:[int256]:int256, initializeEvent:[int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setChallenged:[int256]:int256, setController:[address]:int256, setCreationTime:[int256]:int256, setEarlyResolutionBond:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setExtraBond:[int256,int256]:int256, setExtraBondPoster:[int256,int256]:int256, setFirstPreliminaryOutcome:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setMode:[int256,int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256, suicideFunds:[address]:_]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:int256, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setController:[address]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

inset('../macros/refund.sem')
inset('../macros/eventHelpers.sem')

### This contract keeps track of data associated with reporting periods and the events + reports in them

# This keeps track of info in a period for the events in that period, it takes a branch and votePeriod as params, respectively
    # Events is 0 indexed and stores the events in a period [this allows the client to loop through and detect which events a given user should report on]
    # eventToIndex returns an event index for a given eventid
    # requiredEvents states whether a given event is required to be reported on or not [a round2 backstop or a fork event are both required]
    # subsidy is money for paying back a user for calculating the targeted num of reports for an event
    # eventWeight is number of reports on an event in a round 1 event, total rep reported on it in a backstop 1 or fork event
    # repEvent is the amount of rep that has reported on an event
    # lesserReportNum is the number of reports an event should have [the lesser of how many it can afford from fees and how many it should have due to outstanding share value]
    # numberEvents is the total number of events in a given reporting period
    # roundTwoNumEvents is the number of round 2 events in a given reporting period
    # numReqEvents is the number of events that are required to be reported on in a given reporting period
    # numberRemoved is the number of events that no longer have to be reported on in this period [a good example is an event that was resolved early successfully]
    # numEventsToReportOn is the number of events available for reporting on [not including required events] * base number of reporters per event [this is multiplied by a user's periodRepWeight to figure out how many events they should be reporting on in a given period]
    # feeValue is the value of all fees for all markets that have events expiring in this period denominated in wei
    # afterFork is the number of events created for a fork period or 2 periods after that provided the events were created after the fork was initiated
data periodEventInfo[][](events[], eventToIndex[], requiredEvents[], subsidy[], eventWeight[], lesserReportNum[], numberEvents, roundTwoNumEvents, numReqEvents, numberRemoved, numEventsToReportOn, feeValue, afterFork)

# This keeps track of info in a period for the reporters, it takes a branch and votePeriod as params, respectively
    # Before rep is the amount of active rep a user has before any penalizations for reporting incorrectly
    # After rep is the amount of active rep a user has after all the modifications to their rep at the end of a period [it's initially equal to the before rep]
    # Period dormant rep is how much rep a user has dormant at the start of a period
    # Report is the report a reporter submitted for a given event [takes reporter, event as params]
    # Ethics is the ethicality a reporter submitted for a given event [takes reporter, event as params]
    # numReportsSubmitted is the number of a reports a reporter has submitted for this period
    # periodRepWeight is a weighting used to calculate how many events a reporter should report on in a given period
    # numberOfActiveReporters is number of reporters active in this reporting period who are able to claim fees for reporting
    # reporters is a 0 indexed array of the active reporters
data reporterPeriodInfo[][](beforeRep[], afterRep[], periodDormantRep[], report[][], ethics[][], numReportsSubmitted[], periodRepWeight[], numberOfActiveReporters, reporters[])

# This takes a period and event as params (e.g self.modeItems[period][event]) and stores mode data for categorical & scalar event reports
    # reportValue takes a possible reported value [say .72 in fixed point] as a key and the value is how many reports that event has, or in the case of a backstop, how much rep has reported on that event
    # currentMode keeps track of the current mode report for an event or which reportValue key has the highest value of reports/rep reported on it
    # currentModeItems is how many reports or rep reported the current mode has, which is used in determining whether there's a new mode
data modeItems[][](reportValue[], currentMode, currentModeItems)

data controller

macro MAX_THRESHOLD: 10**54
macro COST_FOR_EVENT_REPORT_CALCULATION: 500000

def init():
    self.controller = 0x0

# Refunds cost to calculate number of reports for an event
def refundCost(to, branch, period, event):
    self.controller.assertIsWhitelisted(msg.sender)
    if(!send(to, self.periodEventInfo[branch][period].subsidy[event])):
        ~invalid()
    return(1)

# @return fxp
def getSubsidy(branch, period, event):
    return(self.periodEventInfo[branch][period].subsidy[event])

# @return fxp
def getPeriodRepWeight(branch, votePeriod, sender):
    return(self.reporterPeriodInfo[branch][votePeriod].periodRepWeight[sender])

def setPeriodRepWeight(branch, votePeriod, sender, value):
    self.controller.assertIsWhitelisted(msg.sender)
    self.reporterPeriodInfo[branch][votePeriod].periodRepWeight[sender] = value
    return(1)

def setEthicReport(branch, period, event, ethics, sender):
    self.controller.assertIsWhitelisted(msg.sender)
    self.reporterPeriodInfo[branch][period].ethics[sender][event] = ethics
    return(1)

def setReport(branch, period, event, report, sender):
    self.controller.assertIsWhitelisted(msg.sender)
    self.reporterPeriodInfo[branch][period].report[sender][event] = report
    return(1)

# @return fxp
def setBeforeRep(branch, period, rep, sender):
    self.controller.assertIsWhitelisted(msg.sender)
    self.reporterPeriodInfo[branch][period].beforeRep[sender] = rep
    self.reporterPeriodInfo[branch][period].reporters[self.reporterPeriodInfo[branch][period].numberOfActiveReporters] = sender
    self.reporterPeriodInfo[branch][period].numberOfActiveReporters += 1
    return(rep)

# @return fxp
def setAfterRep(branch, period, rep, sender):
    self.controller.assertIsWhitelisted(msg.sender)
    self.reporterPeriodInfo[branch][period].afterRep[sender] = rep
    return(rep)

# @return fxp
def setPeriodDormantRep(branch, period, rep, sender):
    self.controller.assertIsWhitelisted(msg.sender)
    self.reporterPeriodInfo[branch][period].periodDormantRep[sender] = rep
    return(rep)

# @return fxp
def getLesserReportNum(branch, period, event):
    return(self.periodEventInfo[branch][period].lesserReportNum[event])

def getCurrentModeItems(period, event):
    return(self.modeItems[period][event].currentModeItems)

# @return fxp
def getCurrentMode(period, event):
    return(self.modeItems[period][event].currentMode)

# returns weight of a report value for the mode
# @return fxp
def getWeightOfReport(period, event, report):
    return(self.modeItems[period][event].reportValue[report])

# @return fxp
def getEthicReport(branch, period, event, sender):
    return(self.reporterPeriodInfo[branch][period].ethics[sender][event])

# @return fxp
def getReport(branch, period, event, sender):
    self.controller.assertIsWhitelisted(msg.sender)
    return(self.reporterPeriodInfo[branch][period].report[sender][event])

# @return fxp
def getBeforeRep(branch, period, sender):
    return(self.reporterPeriodInfo[branch][period].beforeRep[sender])

# @return fxp
def getAfterRep(branch, period, sender):
    return(self.reporterPeriodInfo[branch][period].afterRep[sender])

# @return fxp
def getPeriodDormantRep(branch, period, sender):
    return(self.reporterPeriodInfo[branch][period].periodDormantRep[sender])

def getNumReportsSubmitted(branch, votePeriod, sender):
    return(self.reporterPeriodInfo[branch][votePeriod].numReportsSubmitted[sender])

# @return fxp
def getEventWeight(branch, votePeriod, event):
    return(self.periodEventInfo[branch][votePeriod].eventWeight[event])

def getNumRoundTwo(branch, period):
    return(self.periodEventInfo[branch][period].roundTwoNumEvents)

def addRoundTwo(branch, period):
    self.controller.assertIsWhitelisted(msg.sender)
    self.periodEventInfo[branch][period].roundTwoNumEvents += 1
    return(1)

def getRequired(event, period, branch):
    return(self.periodEventInfo[branch][period].requiredEvents[event])

def getNumRequired(branch, period):
    return(self.periodEventInfo[branch][period].numReqEvents)

# Return 0 means already required
def setEventRequired(branch, period, event):
    self.controller.assertIsWhitelisted(msg.sender)
    if(!self.periodEventInfo[branch][period].requiredEvents[event]):
        self.periodEventInfo[branch][period].requiredEvents[event] = 1
        self.periodEventInfo[branch][period].numReqEvents += 1
        return(1)
    else:
        return(0)

# With this function you can get the events and report on outcomes
# @return all events in a branch and expiration period
def getEvents(branch, period):
    numEvents = self.periodEventInfo[branch][period].numberEvents
    events = array(numEvents)
    i = 0
    while(i < numEvents):
        events[i] = self.periodEventInfo[branch][period].events[i]
        i += 1
    return(events: arr)

def getEventsRange(branch, period, start, end):
    numEvents = end - start
    events = array(numEvents)
    i = start
    index = 0
    while(i < end):
        events[index] = self.periodEventInfo[branch][period].events[i]
        index += 1
        i += 1
    return(events: arr)

def getEventIndex(branch, period, event):
    return(self.periodEventInfo[branch][period].eventToIndex[event])

# gets number of available events to report on multiplied by base reporters per event as a minimum, not counting required or removed events
# -1: voting not started
def setNumEventsToReportOn(branch):
    self.controller.assertIsWhitelisted(msg.sender)
    period = BRANCHES.getVotePeriod(branch)
    eventsInPeriod = self.periodEventInfo[branch][period].numberEvents
    numberOfRequiredEvents = self.periodEventInfo[branch][period].numReqEvents
    numberOfRemovedEvents = self.periodEventInfo[branch][period].numberRemoved
    forkPeriod = BRANCHES.getForkPeriod(branch)
    forkScenario = period == (forkPeriod + 1) or period == (forkPeriod + 2)
    if(forkScenario):
        # only count events made after fork
        self.periodEventInfo[branch][period].numEventsToReportOn = self.periodEventInfo[branch][period].afterFork * BRANCHES.getBaseReporters(branch)
    else:
        self.periodEventInfo[branch][period].numEventsToReportOn = (eventsInPeriod - numberOfRequiredEvents - numberOfRemovedEvents) * BRANCHES.getBaseReporters(branch)
    return(1)

# gets number of available events to report on, not counting required events
def getNumEventsToReportOn(branch, period):
    return(self.periodEventInfo[branch][period].numEventsToReportOn)

# @return wei
def getFeeValue(branch, expIndex):
    return(self.periodEventInfo[branch][expIndex].feeValue)

def getNumberEvents(branch, period):
    return(self.periodEventInfo[branch][period].numberEvents)

def getEvent(branch, period, eventIndex):
    return(self.periodEventInfo[branch][period].events[eventIndex])

# check that msg.sender is one of our function contracts
def addEvent(branch, futurePeriod, event, subsidy, currency, wallet, afterFork):
    self.controller.assertIsWhitelisted(msg.sender)
    numberEvents = self.periodEventInfo[branch][futurePeriod].numberEvents
    self.periodEventInfo[branch][futurePeriod].events[numberEvents] = event
    self.periodEventInfo[branch][futurePeriod].eventToIndex[event] = numberEvents
    self.periodEventInfo[branch][futurePeriod].numberEvents += 1
    self.periodEventInfo[branch][futurePeriod].subsidy[event] += subsidy
    self.periodEventInfo[branch][futurePeriod].afterFork += afterFork
    INFO.setCurrencyAndWallet(currency, wallet)
    return(1)

def deleteEvent(branch, period, event):
    self.controller.assertIsWhitelisted(msg.sender)
    i = self.periodEventInfo[branch][period].eventToIndex[event]
    self.periodEventInfo[branch][period].events[i] = 0
    self.periodEventInfo[branch][period].eventToIndex[event] = 0
    return(1)

def removeEvent(branch, period):
    self.controller.assertIsWhitelisted(msg.sender)
    self.periodEventInfo[branch][period].numberRemoved += 1
    return(1)

def getNumRemoved(branch, period):
    return(self.periodEventInfo[branch][period].numberRemoved)

def adjustPeriodFeeValue(branch, expIndex, amount):
    self.controller.assertIsWhitelisted(msg.sender)
    self.periodEventInfo[branch][expIndex].feeValue += amount
    return(1)

# called in case an event doesn't get reported on at all in a period
def moveEvent(branch, event):
    periodLength = BRANCHES.getPeriodLength(branch)
    if(BRANCHES.getVotePeriod(branch) > EVENTS.getExpiration(event) / periodLength and !EVENTS.getUncaughtOutcome(event) and !eventCreatedPriorToFork(event)):
        period = block.timestamp / periodLength
        forkPeriod = BRANCHES.getForkPeriod(branch)
        afterFork = 0
        if(period == (forkPeriod + 1) or period == (forkPeriod + 2)):
            afterFork = 1
        currency = INFO.getCurrency(event)
        wallet = INFO.getWallet(event)
        # add to next expiration period
        self.addEvent(branch, period, event, COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice, currency, wallet, afterFork)
        EVENTS.setExpiration(event, block.timestamp)
        EVENTS.setThreshold(event, MAX_THRESHOLD)
        return(1)
    else:
        return(0)

def addToWeightOfReport(period, event, report, amount):
    self.controller.assertIsWhitelisted(msg.sender)
    self.modeItems[period][event].reportValue[report] += amount
    return(1)

def setCurrentMode(period, event, mode):
    self.controller.assertIsWhitelisted(msg.sender)
    self.modeItems[period][event].currentMode = mode
    return(1)

# basically setting current mode's weight
def setCurrentModeItems(period, event, modeReport):
    self.controller.assertIsWhitelisted(msg.sender)
    self.modeItems[period][event].currentModeItems = self.modeItems[period][event].reportValue[modeReport]
    return(1)

def setEventWeight(branch, votePeriod, event, num):
    self.controller.assertIsWhitelisted(msg.sender)
    self.periodEventInfo[branch][votePeriod].eventWeight[event] = num
    return(1)

def countReportAsSubmitted(branch, votePeriod, event, sender, weight):
    self.controller.assertIsWhitelisted(msg.sender)
    self.periodEventInfo[branch][votePeriod].eventWeight[event] += weight
    self.reporterPeriodInfo[branch][votePeriod].numReportsSubmitted[sender] += 1
    return(1)

def addReportToReportsSubmitted(branch, period, user):
    self.controller.assertIsWhitelisted(msg.sender)
    self.reporterPeriodInfo[branch][period].numReportsSubmitted[user] += 1
    return(1)

def setLesserReportNum(branch, period, event, num):
    self.controller.assertIsWhitelisted(msg.sender)
    self.periodEventInfo[branch][period].lesserReportNum[event] = num
    return(1)

def getActiveReporters(branch, period, from, to):
    if(to == 0):
        to = self.reporterPeriodInfo[branch][period].numberOfActiveReporters
    i = from
    reporters = array((to - from))
    while i < to:
        reporters[i] = self.reporterPeriodInfo[branch][period].reporters[i]
        i += 1
    return(reporters: arr)

def getNumActiveReporters(branch, period):
    return(self.reporterPeriodInfo[branch][period].numberOfActiveReporters)

def getAfterFork(branch, votePeriod):
    return(self.periodEventInfo[branch][votePeriod].afterFork)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)