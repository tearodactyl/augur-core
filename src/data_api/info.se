# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

inset('../macros/refund.sem')

# Every entity in our contract has similar metadata.
# Instead of putting it in each entity, we put all the metadata here.
# Info's index is the hash of the item we're getting info on
data Info[](description[], descriptionLength, creator, creationFee, wallet, currency)

data controller

def init():
    self.controller = 0x0
    description = text("Root branch")
    save(self.Info[1010101].description[0], description, chars = len(description))
    self.Info[1010101].creator = msg.sender
    self.Info[1010101].creationFee = 10 * ONE
    self.Info[1010101].descriptionLength = len(description)

def getDescription(ID):
    length = self.Info[ID].descriptionLength
    return(load(self.Info[ID].description[0], chars = length): str)

def getDescriptionLength(ID):
    return(self.Info[ID].descriptionLength)

def getCreator(ID):
    return(self.Info[ID].creator)

# @return fxp
def getCreationFee(ID):
    return(self.Info[ID].creationFee)

def getCurrency(ID):
    return(self.Info[ID].currency)

def getWallet(ID):
    return(self.Info[ID].wallet)

def setCurrencyAndWallet(ID, currency, wallet):
    self.controller.assertIsWhitelisted(msg.sender)
    self.Info[ID].currency = currency
    self.Info[ID].wallet = wallet
    return(1)

# @return 1 if success, 0 if creator already exists
def setInfo(ID, description: str, creator, fxpFee, currency, wallet):
    self.controller.assertIsWhitelisted(msg.sender)
    if(!self.Info[ID].creator):
        save(self.Info[ID].description[0], description, chars = len(description))
        self.Info[ID].descriptionLength = len(description)
        self.Info[ID].creationFee = fxpFee
        self.Info[ID].creator = creator
        self.Info[ID].currency = currency
        self.Info[ID].wallet = wallet
        return(1)
    else:
        return(0)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)