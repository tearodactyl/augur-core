# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

### Deals with whether a reporter can report on a given event

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setController:[address]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, suicideFunds:[address]:_, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

CONSENSUS = self.controller.lookup('consensusData')
extern consensusData: [decreaseDenominator:[int256,int256,int256]:int256, doRefund:[int256,int256]:int256, getBaseReportersLastPeriod:[int256]:int256, getDenominator:[int256,int256]:int256, getFeeFirst:[int256,int256]:int256, getFeesCollected:[int256,int256,int256,int256]:int256, getNotEnoughPenalized:[int256,int256,int256]:int256, getPenalized:[int256,int256,int256,int256]:int256, getPenalizedNum:[int256,int256,int256]:int256, getPenalizedUpTo:[int256,int256]:int256, getPeriodBalance:[int256,int256]:int256, getRepCollected:[int256,int256,int256]:int256, getRepRedistributionDone:[int256,int256]:int256, getSlashed:[int256,int256,int256]:int256, increaseDenominator:[int256,int256,int256]:int256, increasePenalizedNum:[int256,int256,int256,int256]:int256, setBaseReportersLastPeriod:[int256,int256]:int256, setController:[address]:int256, setFeeFirst:[int256,int256,int256]:int256, setFeesCollected:[int256,int256,int256,int256]:int256, setNotEnoughPenalized:[int256,int256,int256]:int256, setPenalized:[int256,int256,int256,int256]:int256, setPenalizedUpTo:[int256,int256,int256]:int256, setPeriodBalance:[int256,int256,int256]:int256, setRefund:[int256,int256]:int256, setRepCollected:[int256,int256,int256]:int256, setSlashed:[int256,int256,int256]:int256, suicideFunds:[address]:_]

EVENTS = self.controller.lookup('events')
extern events: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, addReportersPaidSoFar:[int256]:int256, getBond:[int256]:int256, getChallenged:[int256]:int256, getCreationTime:[int256]:int256, getEarlyResolutionBond:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventInfo:[int256]:int256[], getEventPushedUp:[int256]:int256, getEventResolution:[int256]:bytes, getExpiration:[int256]:int256, getExtraBond:[int256]:int256, getExtraBondPoster:[int256]:int256, getFirstPreliminaryOutcome:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForkResolveAddress:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getMode:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportersPaidSoFar:[int256]:int256, getReportingThreshold:[int256]:int256, getResolutionAddress:[int256]:int256, getResolutionLength:[int256]:int256, getResolveBondPoster:[int256]:int256, getUncaughtOutcome:[int256]:int256, initializeEvent:[int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setChallenged:[int256]:int256, setController:[address]:int256, setCreationTime:[int256]:int256, setEarlyResolutionBond:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setExtraBond:[int256,int256]:int256, setExtraBondPoster:[int256,int256]:int256, setFirstPreliminaryOutcome:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setMode:[int256,int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256, suicideFunds:[address]:_]

EXPEVENTS = self.controller.lookup('expiringEvents')
extern expiringEvents: [addEvent:[int256,int256,int256,int256,int256,int256,int256]:int256, addReportToReportsSubmitted:[int256,int256,int256]:int256, addRoundTwo:[int256,int256]:int256, addToWeightOfReport:[int256,int256,int256,int256]:int256, adjustPeriodFeeValue:[int256,int256,int256]:int256, countReportAsSubmitted:[int256,int256,int256,int256,int256]:int256, deleteEvent:[int256,int256,int256]:int256, getActiveReporters:[int256,int256,int256,int256]:int256[], getAfterFork:[int256,int256]:int256, getAfterRep:[int256,int256,int256]:int256, getBeforeRep:[int256,int256,int256]:int256, getCurrentMode:[int256,int256]:int256, getCurrentModeItems:[int256,int256]:int256, getEthicReport:[int256,int256,int256,int256]:int256, getEvent:[int256,int256,int256]:int256, getEventIndex:[int256,int256,int256]:int256, getEventWeight:[int256,int256,int256]:int256, getEvents:[int256,int256]:int256[], getEventsRange:[int256,int256,int256,int256]:int256[], getFeeValue:[int256,int256]:int256, getLesserReportNum:[int256,int256,int256]:int256, getNumActiveReporters:[int256,int256]:int256, getNumEventsToReportOn:[int256,int256]:int256, getNumRemoved:[int256,int256]:int256, getNumReportsSubmitted:[int256,int256,int256]:int256, getNumRequired:[int256,int256]:int256, getNumRoundTwo:[int256,int256]:int256, getNumberEvents:[int256,int256]:int256, getPeriodDormantRep:[int256,int256,int256]:int256, getPeriodRepWeight:[int256,int256,int256]:int256, getReport:[int256,int256,int256,int256]:int256, getRequired:[int256,int256,int256]:int256, getSubsidy:[int256,int256,int256]:int256, getWeightOfReport:[int256,int256,int256]:int256, moveEvent:[int256,int256]:int256, refundCost:[int256,int256,int256,int256]:int256, removeEvent:[int256,int256]:int256, setAfterRep:[int256,int256,int256,int256]:int256, setBeforeRep:[int256,int256,int256,int256]:int256, setController:[address]:int256, setCurrentMode:[int256,int256,int256]:int256, setCurrentModeItems:[int256,int256,int256]:int256, setEthicReport:[int256,int256,int256,int256,int256]:int256, setEventRequired:[int256,int256,int256]:int256, setEventWeight:[int256,int256,int256,int256]:int256, setLesserReportNum:[int256,int256,int256,int256]:int256, setNumEventsToReportOn:[int256]:int256, setPeriodDormantRep:[int256,int256,int256,int256]:int256, setPeriodRepWeight:[int256,int256,int256,int256]:int256, setReport:[int256,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

FXP = self.controller.lookup('fxpFunctions')
extern fxpFunctions: [fxExp:[int256]:int256, fxLog:[int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

REPORTING = self.controller.lookup('reporting')
extern reporting: [addDormantRep:[int256,int256,int256]:int256, addRep:[int256,int256,int256]:int256, addReporter:[int256,int256,int256,int256,int256]:int256, adjustActiveRep:[int256,int256]:int256, balanceOfReporter:[int256,int256]:int256, claimInitialRepFromRepContract:[]:int256, getActiveRep:[int256]:int256, getDormantRepByIndex:[int256,int256]:int256, getNumberReporters:[int256]:int256, getRepBalance:[int256,int256]:int256, getRepByIndex:[int256,int256]:int256, getReportedOnNonFinalRoundTwoEvent:[int256,int256]:int256, getReporterID:[int256,int256]:int256, getReputation:[int256]:int256[], getTotalRep:[int256]:int256, repIDToIndex:[int256,int256]:int256, setController:[address]:int256, setInitialReporters:[int256]:int256, setRep:[int256,int256,int256]:int256, setReportedOnNonFinalRoundTwoEvent:[int256,int256,int256]:int256, subtractDormantRep:[int256,int256,int256]:int256, subtractRep:[int256,int256,int256]:int256, suicideFunds:[address]:_, totalSupply:[int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addOrder:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOrderIDs:[int256]:int256[], getOriginalTradingPeriod:[int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPrevID:[int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:int256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalOrders:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[]]:int256, modifyParticipantShares:[int256,int256,int256,int256,int256]:int256, modifyShares:[int256,int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, removeOrderFromMarket:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

inset('../macros/refund.sem')
inset('../macros/eventHelpers.sem')
inset('../macros/float.sem')
inset('../macros/periodStage.sem')

macro ONE_POINT_TWO: 1200000000000000000

macro POINT_ZERO_ONE: 10000000000000000

macro MAX_THRESHOLD: 10 ** 54

macro MIN_EVENTS_FOR_WHALE_TO_REPORT_ON: 30

macro MARKETS_COUNTING_TOWARDS_SHARE_VALUE: 20

macro GAS_SUBSIDY: 3500000

data controller

# Calculates what a reporter should have to get below as a target to report on any given event
# @return fxp
def init():
    self.controller = 0x0

def calculateReportingThreshold(branch, event, period, sender):
    self.controller.assertIsWhitelisted(msg.sender)
    repConstant = EXPEVENTS.getPeriodRepWeight(branch, period, sender)
    if(!repConstant):
        calculateAndSetRepConstant()
    # 1 is 10**54 here, lesserreportnum, repconstant, and one are all base 10**18
    reportingThreshold = EXPEVENTS.getLesserReportNum(branch, period, event) * repConstant * ONE
    if(reportingThreshold > MAX_THRESHOLD):
        reportingThreshold = MAX_THRESHOLD
    return(reportingThreshold)

# calculates how many reports should be on a given event
# @return fxp
def calculateReportTargetForEvent(branch, event, votePeriod, sender):
    numMarkets = EVENTS.getNumMarkets(event)
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    eventIndex = EXPEVENTS.getEventIndex(branch, votePeriod, event)
    eventID = EXPEVENTS.getEvent(branch, votePeriod, eventIndex)
    if(!eventIndex and (!event or eventID != event)):
        return(0)
    atFirstHalfOfPeriod()
    if(currentVotePeriod < votePeriod):
        ~invalid()
    # todo we should prob switch this to when we send fees don't add to a market but rather the event associated w/ the market, then assign reporters based on fees on event / total fees for all events, this'll save cost and be more appropriate for what we actually want
    if(numMarkets > MARKETS_COUNTING_TOWARDS_SHARE_VALUE):
        numMarkets = MARKETS_COUNTING_TOWARDS_SHARE_VALUE
    markets = array(numMarkets)
    markets = EVENTS.getMarkets(event, outitems = numMarkets)
    totalFeesInWei = 0
    i = 0
    while(i < numMarkets):
        totalFeesInWei += MARKETS.getFees(markets[i])
        i += 1
    allFeesForAllMarkets = EXPEVENTS.getFeeValue(branch, votePeriod)
    feeFraction = safeFxpDiv(totalFeesInWei, allFeesForAllMarkets)
    # number of reporters targeted towards a market is quadratic -267*fee_percent**2 / 2 + 533*fee_percent/2 + 1
    numReportersOnMarket = BRANCHES.getBaseReporters(branch) * (safeMul(-267, safeFxpMul(feeFraction, feeFraction))/2 + safeMul(533, feeFraction)/2 + ONE)
    canPayForThisManyReporters = totalFeesInWei / (GAS_SUBSIDY * tx.gasprice)
    lesser = min(canPayForThisManyReporters * ONE, numReportersOnMarket)
    if(!EXPEVENTS.getLesserReportNum(branch, votePeriod, event)):
        EXPEVENTS.refundCost(sender, branch, votePeriod, event)
        EXPEVENTS.setLesserReportNum(branch, votePeriod, event, lesser)
    return(lesser)

# Gets events a reporter should report on
# start is the event index we want to start fetching events to report on from
def getEventsToReportOn(branch, period, sender, start, end):
    if(end == 0):
        end = EXPEVENTS.getNumberEvents(branch, period)
    numEvents = end - start
    events = array(numEvents)
    i = 0
    numEventsToReportOn = 0
    while i < numEvents:
        thisEvent = EXPEVENTS.getEvent(branch, period, start + i)
        if(thisEvent != 0):
            # calculate report target for event here if not done for purposes of computing this
            if(!EXPEVENTS.getLesserReportNum(branch, period, thisEvent)):
                self.calculateReportTargetForEvent(branch, thisEvent, period, msg.sender)
            reportingThreshold = self.calculateReportingThreshold(branch, thisEvent, period, sender)
            hash = sha3([sender, thisEvent], items = 2)
            shaHash = abs(hash)
            # dividing by 57896044618658091106304 gets it normalized to 10**54 as the max for shaHash, so 2**255 -1 / x = 10**54, x is 57896044618658091106304
            shaHash = shaHash / 57896044618658091106304
            notResolvedYet = !EVENTS.getOutcome(thisEvent)
            ableToReportOn = (shaHash < reportingThreshold or EXPEVENTS.getRequired(thisEvent, period, branch)) and notResolvedYet and !eventCreatedPriorToFork(thisEvent)
            if(ableToReportOn):
                events[numEventsToReportOn] = thisEvent
                numEventsToReportOn += 1
        i += 1
    return(slice(events, items = 0, items = numEventsToReportOn): arr)

# In the rare possibility that no one has reported on a market in a given commit period, on the last day, we can change the sha3 threshold, UI calls this.
# Returns 1 if the event's reporting threshold has been set
# Errors: 0 if the event can't be reported on
def setReportingThreshold(event):
    # first check is if event expDate is in the current vote period and second is if blockNum is near expiration of commit period (within 24 hr.)
    # final check is if no reports [commits] on event
    # so if in 24 hr we'd be in the next half of the vote period, we're within 24 hr of the end of this half
    branch = EVENTS.getEventBranch(event)
    periodLength = BRANCHES.getPeriodLength(branch)
    currentVotePeriod = BRANCHES.getVotePeriod(branch)
    inCurrentVotePeriod = (currentVotePeriod == EVENTS.getExpiration(event) / periodLength)
    periodHalfEndsInLessThanADay = (block.timestamp + TWENTY_FOUR_HR*3) / periodLength > currentVotePeriod
    if(!inCurrentVotePeriod or !periodHalfEndsInLessThanADay or EVENTS.getUncaughtOutcome(event) or eventCreatedPriorToFork(event) or !EVENTS.getChallenged(event)):
        return(0)
    EVENTS.setThreshold(event, MAX_THRESHOLD)
    return(1)

# If anyone w/ 1 rep or more in active rep could've reported in a period but didn't enough they need to be penalized.
# Loop through the list of all active reporters in a period and branch and check their expected minimum number of events to report on, if they've reported on less than this then find an example event they could've reported on but didn't, then return those addresses and events
def findLazyReportersAndLeechers(branch, votePeriod, reporterStart, reporterEnd, eventStart, eventEnd):
    if(reporterEnd == 0):
        reporterEnd = EXPEVENTS.getNumActiveReporters(branch, votePeriod)
    if(eventEnd == 0):
        eventEnd = EXPEVENTS.getNumberEvents(branch, votePeriod)
    numberReportersChecking = (reporterEnd - reporterStart)
    numberEventsChecking = eventEnd - eventStart
    activeReporters = array(numberReportersChecking)
    activeReporters = EXPEVENTS.getActiveReporters(branch, votePeriod, reporterStart, reporterEnd, outitems = numberReportersChecking)
    events = array(numberEventsChecking)
    events = EXPEVENTS.getEventsRange(branch, votePeriod, eventStart, eventEnd, outitems = numberEventsChecking)
    lazyReportersAndExampleEventsTheyCouldveReportedOn = array(numberReportersChecking * 2)
    reporterIndex = 0
    leecherIndex = 0
    while(reporterIndex < numberReportersChecking):
        reporter = activeReporters[reporterIndex]
        if(EXPEVENTS.getNumReportsSubmitted(branch, votePeriod, reporter) < self.calculateNumberOfEventsAReporterHasToReportOnAtMinimum(branch, reporter, votePeriod)):
            eventIndex = 0
            while(eventIndex < numberEventsChecking):
                if(self.getEventCouldveReportedOn(branch, votePeriod, reporter, events[eventIndex])):
                    lazyReportersAndExampleEventsTheyCouldveReportedOn[leecherIndex] = reporter
                    lazyReportersAndExampleEventsTheyCouldveReportedOn[leecherIndex+1] = events[eventIndex]
                    leecherIndex += 2
                    eventIndex = numberEventsChecking
                else:
                    eventIndex += 1
        reporterIndex += 1
    return(slice(lazyReportersAndExampleEventsTheyCouldveReportedOn, items = 0, items = leecherIndex): arr)

# Gets whether a reporter was able to report on a given event or not [also a helper function for lazy reporter checking]
# Returns 1 if able
# Errors: 0 if not
def getEventCouldveReportedOn(branch, period, reporter, event):
    reportingThreshold = self.calculateReportingThreshold(branch, event, period, reporter)
    # do abs to ensure it's positive and between 0 and 1
    hash = sha3([reporter, event], items = 2)
    shaHash = abs(hash)
    shaHash = shaHash / 57896044618658091106304
    wasAbleToReportOn = (shaHash < reportingThreshold or EXPEVENTS.getRequired(event, period, branch)) and !eventCreatedPriorToFork(event)
    if(!wasAbleToReportOn):
        return(0)
    return(1)

# simply a helper function / useful to know especially for lazy reporter checking
# @return fxp
def calculateNumberOfEventsAReporterHasToReportOnAtMinimum(branch, reporter, period):
    originalRep = EXPEVENTS.getBeforeRep(branch, period, reporter)
    # this includes the baseReporters * numEventsAvailable
    numEventsAvailableToReportOn = EXPEVENTS.getNumEventsToReportOn(branch, period)
    # eventsExpected == events available in a period * rep percent**1.2
    # exp(1.2*ln(repbal)) / exp(1.2*ln(totalrep)) is == rep percent**1.2 due to this property: a**b=exp(b*ln(a))=e**(b*ln(a))
    repConstant = FXP.fxExp(ONE_POINT_TWO * FXP.fxLog(originalRep) / ONE) * ONE / FXP.fxExp(ONE_POINT_TWO * FXP.fxLog(REPORTING.getActiveRep(branch)) / ONE)
    numRequiredEvents = EXPEVENTS.getNumRequired(branch, period)
    forkPeriod = BRANCHES.getForkPeriod(branch)
    period = BRANCHES.getVotePeriod(branch)
    forkScenario = period == (forkPeriod + 1) or period == (forkPeriod + 2)
    expectedEventsForReporterIncludingRequired = 0
    if(forkScenario):
        expectedEventsForReporterIncludingRequired = repConstant * numEventsAvailableToReportOn
    else:
        expectedEventsForReporterIncludingRequired = repConstant * numEventsAvailableToReportOn + numRequiredEvents * ONE
    dealWithWhaleReporters()
    return(expectedEventsForReporterIncludingRequired / 2)

macro calculateAndSetRepConstant():
    # eventsExpected == events available in a period * rep percent**1.2
        # exp(1.2*ln(repbal)) / exp(1.2*ln(totalrep)) is == rep percent**1.2 due to this property: a**b=exp(b*ln(a))=e**(b*ln(a))
    repConstant = FXP.fxExp(ONE_POINT_TWO * FXP.fxLog(REPORTING.getRepBalance(branch, sender)) / ONE) * ONE / FXP.fxExp(ONE_POINT_TWO * FXP.fxLog(REPORTING.getActiveRep(branch)) / ONE)
    numEventsAvailableToReportOn = EXPEVENTS.getNumEventsToReportOn(branch, period)
    expectedEventsForReporter = repConstant * numEventsAvailableToReportOn
    eventsInPeriod = EXPEVENTS.getNumberEvents(branch, period) - EXPEVENTS.getNumRemoved(branch, period)
    numRequiredEvents = EXPEVENTS.getNumRequired(branch, period)
    # ensures low number of events with highly concentrated rep edge case still get reported on
    if(repFraction >= POINT_ZERO_ONE):
        minimum = min(MIN_EVENTS_FOR_WHALE_TO_REPORT_ON - numRequiredEvents, eventsInPeriod - numRequiredEvents)
        if(expectedEventsForReporter / ONE < minimum):
            expectedEventsForReporter = minimum * ONE
            repConstant = expectedEventsForReporter / numEventsAvailableToReportOn
    EXPEVENTS.setPeriodRepWeight(branch, period, sender, repConstant)

macro dealWithWhaleReporters():
    eventsInPeriod = safeSub(EXPEVENTS.getNumberEvents(branch, lastPeriod), EXPEVENTS.getNumRemoved(branch, lastPeriod))
    reporterIsAWhale = repConstant >= POINT_ZERO_ONE
    if(reporterIsAWhale and forkScenario):
        minimum = safeAdd(MIN_EVENTS_FOR_WHALE, numEventsAvailableToReportOn)
        if(expectedEventsForReporterIncludingRequired / ONE < minimum):
            expectedEventsForReporterIncludingRequired = minimum * ONE
    elif(reporterIsAWhale):
        minimum = min(safeAdd(MIN_EVENTS_FOR_WHALE, numRequiredEvents), eventsInPeriod)
        if(expectedEventsForReporterIncludingRequired / ONE < minimum):
            expectedEventsForReporterIncludingRequired = minimum * ONE
    baseReporters = CONSENSUS.getBaseReportersLastPeriod(branch)
    total = safeMul(repConstant, baseReporters)
    # if total is too high [>1] then expectedEventsForReporterIncludingRequired will estimate a higher number than reality, so need to correct for this below
    # correction for if people have more than x [4.6% of at 40 min reporters] rep in one account - they report on everything (hence incentive to divy rep into mult. accounts and not pool) i.e. if((exp(ln(rep%)*1.2)+0.001)*baseReporters > 1)
    if(total > ONE and forkScenario):
        expectedEventsForReporterIncludingRequired = safeMul(safeDiv(numEventsAvailableToReportOn, baseReporters), ONE)
    elif(total > ONE):
        expectedEventsForReporterIncludingRequired = safeAdd(safeMul(safeDiv(numEventsAvailableToReportOn, baseReporters), ONE), safeMul(numRequiredEvents, ONE))

macro abs($a):
    if($a < 0):
        $a = -$a
    $a

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)