# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

inset('../macros/refund.sem')

macro fxExp2Small($x):
    with $result = 0xDE0B6B3A7640000:
        with $temp = $x:
            $result += 0x99E8DB03256CE5D*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x35574BC3CEE1B29*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0xC530B1588A9744*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x222BA330DD3238*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x4BCAE17B0E026*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x8C1823930274*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0xDDF4DC74E60*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x133B271CDC3*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x17B29A01C3*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x1A4856BBF*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x1A7B0EF3*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x18B0114*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x13598A*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result + 0x1772E*$temp / 0xDE0B6B3A7640000

macro fxExp2($x):
    with $y = $x / 0xDE0B6B3A7640000:
        with $z = $x % 0xDE0B6B3A7640000:
            fxExp2Small($z) * 2**$y

macro fxExp($x):
    fxExp2($x * 0xDE0B6B3A7640000 / 0x99E8DB03256CE5D)

macro fxFloorLog2($x):
    with $y = $x / 0xDE0B6B3A7640000:
        with $lo = 0:
            with $hi = 195:
                with $mid = ($hi + $lo)/2:
                    while (($lo + 1) != $hi):
                        if $y < 2 ** $mid:
                            $hi = $mid
                        else:
                            $lo = $mid
                        $mid = ($hi + $lo) / 2
                    $lo

macro fxLog2Small($x):
    with $result = -0x3A1FC51916C688B3:
        with $temp = $x:
            $result += 0xC565F219AF5978B2*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result -= 0x1C1D8598D667FDA01*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x345818200705A646C*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result -= 0x4B0C797AB63C59115*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x531D5B0D773470D90*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result -= 0x479AEAF9DC2035C87*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x3023A4D6640FB61C5*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result -= 0x193016839200ECECC*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0xA286AE6FEC49021A*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result -= 0x319100C46AD3846C*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0xB0F2D8D21D2BDB2*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result -= 0x1B42116FA4CEA01*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result += 0x29772EF1112E47*$temp / 0xDE0B6B3A7640000
            $temp = $temp*$x / 0xDE0B6B3A7640000
            $result - 0x1D57FAAD753FF*$temp / 0xDE0B6B3A7640000

macro fxLog2($x):
    with $y = fxFloorLog2($x):
        with $z = $x / 2**$y:
            $y * 0xDE0B6B3A7640000 + fxLog2Small($z)

macro fxLog($x):
    fxLog2($x) * 0xDE0B6B3A7640000 / 0x14057B7EF767814F

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

# Calculates the exponential function given a fixed point [base 10^18] number, so e^x
data controller

def init():
    self.controller = 0x0

def fxExp(x):
    refund()
    return(fxExp(x))

# Calculates the natural log function given a fixed point [base 10^18] number, so ln(x)
def fxLog(x):
    refund()
    return(fxLog(x))

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)