# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:int256, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setController:[address]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

EXPEVENTS = self.controller.lookup('expiringEvents')
extern expiringEvents: [addEvent:[int256,int256,int256,int256,int256,int256,int256]:int256, addReportToReportsSubmitted:[int256,int256,int256]:int256, addRoundTwo:[int256,int256]:int256, addToWeightOfReport:[int256,int256,int256,int256]:int256, adjustPeriodFeeValue:[int256,int256,int256]:int256, countReportAsSubmitted:[int256,int256,int256,int256,int256]:int256, deleteEvent:[int256,int256,int256]:int256, getActiveReporters:[int256,int256,int256,int256]:int256[], getAfterFork:[int256,int256]:int256, getAfterRep:[int256,int256,int256]:int256, getBeforeRep:[int256,int256,int256]:int256, getCurrentMode:[int256,int256]:int256, getCurrentModeItems:[int256,int256]:int256, getEthicReport:[int256,int256,int256,int256]:int256, getEvent:[int256,int256,int256]:int256, getEventIndex:[int256,int256,int256]:int256, getEventWeight:[int256,int256,int256]:int256, getEvents:[int256,int256]:int256[], getEventsRange:[int256,int256,int256,int256]:int256[], getFeeValue:[int256,int256]:int256, getLesserReportNum:[int256,int256,int256]:int256, getNumActiveReporters:[int256,int256]:int256, getNumEventsToReportOn:[int256,int256]:int256, getNumRemoved:[int256,int256]:int256, getNumReportsSubmitted:[int256,int256,int256]:int256, getNumRequired:[int256,int256]:int256, getNumRoundTwo:[int256,int256]:int256, getNumberEvents:[int256,int256]:int256, getPeriodDormantRep:[int256,int256,int256]:int256, getPeriodRepWeight:[int256,int256,int256]:int256, getReport:[int256,int256,int256,int256]:int256, getRequired:[int256,int256,int256]:int256, getSubsidy:[int256,int256,int256]:int256, getWeightOfReport:[int256,int256,int256]:int256, moveEvent:[int256,int256]:int256, refundCost:[int256,int256,int256,int256]:int256, removeEvent:[int256,int256]:int256, setAfterRep:[int256,int256,int256,int256]:int256, setBeforeRep:[int256,int256,int256,int256]:int256, setController:[address]:int256, setCurrentMode:[int256,int256,int256]:int256, setCurrentModeItems:[int256,int256,int256]:int256, setEthicReport:[int256,int256,int256,int256,int256]:int256, setEventRequired:[int256,int256,int256]:int256, setEventWeight:[int256,int256,int256,int256]:int256, setLesserReportNum:[int256,int256,int256,int256]:int256, setNumEventsToReportOn:[int256]:int256, setPeriodDormantRep:[int256,int256,int256,int256]:int256, setPeriodRepWeight:[int256,int256,int256,int256]:int256, setReport:[int256,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

REPORTING = self.controller.lookup('reporting')
extern reporting: [addDormantRep:[int256,int256,int256]:int256, addRep:[int256,int256,int256]:int256, addReporter:[int256,int256,int256,int256,int256]:int256, adjustActiveRep:[int256,int256]:int256, balanceOfReporter:[int256,int256]:int256, claimInitialRepFromRepContract:[]:int256, getActiveRep:[int256]:int256, getDormantRepByIndex:[int256,int256]:int256, getNumberReporters:[int256]:int256, getRepBalance:[int256,int256]:int256, getRepByIndex:[int256,int256]:int256, getReportedOnNonFinalRoundTwoEvent:[int256,int256]:int256, getReporterID:[int256,int256]:int256, getReputation:[int256]:int256[], getTotalRep:[int256]:int256, repIDToIndex:[int256,int256]:int256, setController:[address]:int256, setInitialReporters:[int256]:int256, setRep:[int256,int256,int256]:int256, setReportedOnNonFinalRoundTwoEvent:[int256,int256,int256]:int256, subtractDormantRep:[int256,int256,int256]:int256, subtractRep:[int256,int256,int256]:int256, suicideFunds:[address]:_, totalSupply:[int256]:int256]

EVENTS = self.controller.lookup('events')
extern events: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, addReportersPaidSoFar:[int256]:int256, getBond:[int256]:int256, getChallenged:[int256]:int256, getCreationTime:[int256]:int256, getEarlyResolutionBond:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventInfo:[int256]:int256[], getEventPushedUp:[int256]:int256, getEventResolution:[int256]:bytes, getExpiration:[int256]:int256, getExtraBond:[int256]:int256, getExtraBondPoster:[int256]:int256, getFirstPreliminaryOutcome:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForkResolveAddress:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getMode:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportersPaidSoFar:[int256]:int256, getReportingThreshold:[int256]:int256, getResolutionAddress:[int256]:int256, getResolutionLength:[int256]:int256, getResolveBondPoster:[int256]:int256, getUncaughtOutcome:[int256]:int256, initializeEvent:[int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setChallenged:[int256]:int256, setController:[address]:int256, setCreationTime:[int256]:int256, setEarlyResolutionBond:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setExtraBond:[int256,int256]:int256, setExtraBondPoster:[int256,int256]:int256, setFirstPreliminaryOutcome:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setMode:[int256,int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256, suicideFunds:[address]:_]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setController:[address]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, suicideFunds:[address]:_, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addOrder:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOrderIDs:[int256]:int256[], getOriginalTradingPeriod:[int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPrevID:[int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:int256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalOrders:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[]]:int256, modifyParticipantShares:[int256,int256,int256,int256,int256]:int256, modifyShares:[int256,int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, removeOrderFromMarket:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

BACKSTOPS = self.controller.lookup('backstops')
extern backstops: [adjForkBondPaid:[int256,int256]:int256, doRoundTwoRefund:[int256,int256]:int256, getBondAmount:[int256]:int256, getBondPaid:[int256]:int256, getBondPoster:[int256]:int256, getBondReturned:[int256]:int256, getDisputedOverEthics:[int256]:int256, getFinal:[int256]:int256, getForkBondPaid:[int256]:int256, getForkBondPoster:[int256]:int256, getForkedOverEthicality:[int256]:int256, getMoved:[int256]:int256, getOriginalBranch:[int256]:int256, getOriginalEthicality:[int256]:int256, getOriginalOutcome:[int256]:int256, getOriginalVotePeriod:[int256]:int256, getResolved:[int256,int256]:int256, getRoundTwo:[int256]:int256, increaseBondPaid:[int256,int256]:int256, setBondAmount:[int256,int256]:int256, setBondPoster:[int256,int256]:int256, setBondReturned:[int256]:int256, setController:[address]:int256, setDisputedOverEthics:[int256]:int256, setFinal:[int256]:int256, setForkBondPoster:[int256,int256]:int256, setForkedOverEthicality:[int256]:int256, setMoved:[int256]:int256, setOriginalBranch:[int256,int256]:int256, setOriginalEthicality:[int256,int256]:int256, setOriginalOutcome:[int256,int256]:int256, setOriginalVotePeriod:[int256,int256]:int256, setResolved:[int256,int256,int256]:int256, setRoundTwo:[int256,int256]:int256, setRoundTwoRefund:[int256,int256]:int256, suicideFunds:[address]:_]

SENDREP = self.controller.lookup('sendReputation')
extern sendReputation: [allowance:[int256,int256,int256]:int256, approve:[int256,int256,int256]:int256, claimRep:[]:int256, sendRepFrom:[int256,int256,int256,int256]:int256, setController:[address]:int256, suicideFunds:[address]:_, transferFrom:[int256,int256,int256,int256]:int256]

BINARYRESOLVE = self.controller.lookup('binaryMarketResolve')
extern binaryMarketResolve: [resolveBinary:[int256,int256,int256,int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

NONBINARYRESOLVE = self.controller.lookup('nonBinaryMarketResolve')
extern nonBinaryMarketResolve: [resolveCategoricalOrScalar:[int256,int256,int256,int256,int256,int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

inset('../macros/refund.sem')
inset('../macros/eventHelpers.sem')
inset('../macros/float.sem')

data controller

macro POINT_ZERO_ONE: 10000000000000000
macro COST_FOR_EVENT_REPORT_CALCULATION: 500000
macro MIN_BOND: 200 * ONE

### Deals with the first backstop wherein everyone reports on a given event

# Allows a user to post a bond to enter round two of consensus
# appealBond = marketValue * (0.01 + marketFee / 2) + averageAdjudicationCost
    # averageAdjudicationCost = Total fees paid to reporters for all markets in this reporting round / number of markets in this reporting round.
        # needs an abs min of ~200 rep.
# Reporting period is 2 months minus 48 hours. This 48 hours allows for the appeals to take place before the next reporting round begins.
# Returns 1 upon success
# Errors:
    #  0: invalid votePeriod/branch
    # -1: branch is in the middle of a fork
    # -2: not enough money
    # -3: event has no votes so far
    # ~invalid()s if not enough msg.value to cover resolution cost or not a large enough bond
def init():
    self.controller = 0x0

def roundTwoPostBond(branch, event, eventIndex, overEthicality):
    MUTEX.acquire()
    votePeriod = BRANCHES.getVotePeriod(branch)
    roundTwoBondCheckPreconditions()
    BACKSTOPS.setRoundTwoRefund(event, msg.value)
    averageAdjudicationCost = BRANCHES.getInitialBalance(branch, votePeriod, BRANCHES.getBranchCurrency(branch, 0)) / EXPEVENTS.getNumberEvents(branch, votePeriod)
    bond = averageAdjudicationCost + safeFxpMul(MARKETS.getSharesValue(market), (POINT_ZERO_ONE + MARKETS.getTradingFee(market) / 2))
    bond = min(bond, MIN_BOND)
    eventID = EXPEVENTS.getEvent(branch, votePeriod, eventIndex)
    periodLength = BRANCHES.getPeriodLength(branch)
    currentPeriod = block.timestamp / periodLength
    currentPlus48Hr = (block.timestamp + 2 * TWENTY_FOUR_HR) / periodLength
    validEvent = (event != 0 and event == eventID)
    # if so, we're not in the final 48 hours or event isn't in this branch + votePeriod, or it's already been put into a backstop
    if(currentPeriod == currentPlus48Hr or !validEvent or BACKSTOPS.getRoundTwo(event) or EVENTS.getForked(event)):
        MUTEX.release()
        return(0)
    # pays money to cover resolution cost
    if(!send(BACKSTOPS, msg.value)):
        ~invalid()
    # send the bond to the branch
    if(!SENDREP.sendRepFrom(branch, msg.sender, event, bond)):
        ~invalid()
    # makes event required reporting in round 2 (the next period) as well
    EXPEVENTS.setEventRequired(branch, votePeriod + 1, event)
    # push event into next period
    forkPeriod = BRANCHES.getForkPeriod(branch)
    afterFork = 0
    if(votePeriod == (forkPeriod + 1) or votePeriod == (forkPeriod + 2)):
        afterFork = 1
    currency = INFO.getCurrency(event)
    wallet = INFO.getWallet(event)
    # add to next expiration period
    EXPEVENTS.addEvent(branch, votePeriod + 1, event, COST_FOR_EVENT_REPORT_CALCULATION * tx.gasprice, currency, wallet, afterFork)

    # set event expiration date to be after the current reporting period ends
    EVENTS.setExpiration(event, block.timestamp)
    # set round two to true so can't be done again
    BACKSTOPS.setRoundTwo(event, 1)
    BACKSTOPS.setOriginalVotePeriod(event, votePeriod)
    if(scalar(event) or categorical(event)):
        BACKSTOPS.setOriginalOutcome(event, EVENTS.getUncaughtOutcome(event))
    else:
        BACKSTOPS.setOriginalOutcome(event, catch(EVENTS.getUncaughtOutcome(event)))
    BACKSTOPS.setOriginalEthicality(event, ethicCatch(EVENTS.getEthics(event)))
    EXPEVENTS.addRoundTwo(branch, votePeriod)
    BACKSTOPS.setBondPoster(event, msg.sender)
    EVENTS.setUncaughtOutcome(event, 0)
    EVENTS.setMode(event, 0)
    EVENTS.setEthics(event, 0)
    if(overEthicality):
        BACKSTOPS.setDisputedOverEthics(event)
    MUTEX.release()
    return(1)

# Resolves a round 2 event scenario
def roundTwoResolve(branch, event, eventIndex, sender):
    refund()
    MUTEX.acquire()
    if(!branch):
        ~invalid()
    periodLength = BRANCHES.getPeriodLength(branch)
    votePeriod = EVENTS.getExpiration(event) / periodLength
    market = EVENTS.getMarket(event, 0)
    averageAdjudicationCost = BRANCHES.getInitialBalance(branch, votePeriod - 1, BRANCHES.getBranchCurrency(branch, 0)) / EXPEVENTS.getNumberEvents(branch, votePeriod - 1)
    bond = averageAdjudicationCost + safeFxpMul(MARKETS.getSharesValue(market), (POINT_ZERO_ONE + MARKETS.getTradingFee(market) / 2))
    bond = min(bond, MIN_BOND)
    eventID = EXPEVENTS.getEvent(branch, votePeriod, eventIndex)
    overruled = 0
    forked = EVENTS.getForked(event)
    # checks if the event's outcome was overruled or the same as the original reporting cycle
    sameEthics = (BACKSTOPS.getOriginalEthicality(event) == ethicCatch(EVENTS.getEthics(event)))
    originalOutcome = BACKSTOPS.getOriginalOutcome(event)
    uncaughtOutcome = EVENTS.getUncaughtOutcome(event)
    if(scalar(event) or categorical(event)):
        overruled = (originalOutcome != uncaughtOutcome or !sameEthics)
    else:
        overruled = (originalOutcome != catch(uncaughtOutcome) or !sameEthics)
    currentVotePeriod = block.timestamp / periodLength
    votedOnAgain = (currentVotePeriod > votePeriod)
    validEvent = (event != 0 and event == eventID)
    forkPeriod = BRANCHES.getForkPeriod(branch)
    # if forking and this isn't the fork event
    roundTwoEventWithBondNotReturned = (!BACKSTOPS.getBondReturned(event) and BACKSTOPS.getRoundTwo(event) and validEvent)
    if(!forked and roundTwoEventWithBondNotReturned and eventCreatedPriorToFork(eventID)):
        returnRoundTwoBondInForkScenario()
    # overruled and bond poster was right
    elif(overruled and votedOnAgain and !forked and roundTwoEventWithBondNotReturned):
        returnBond()
    # same as original consensus and bond poster was wrong [or malicious]
    elif(votedOnAgain and !forked and roundTwoEventWithBondNotReturned):
        loseBond()
    MUTEX.release()
    return(1)

# Actually sets the outcome for a round 2 event
# Errors:
    # 0: event isn't binary, categorical, or scalar [hell has frozen over or quantum events have been invented]
def resolve(branch, event):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)
    if(binary(event)):
        BINARYRESOLVE.resolveBinary(event, EVENTS.getMarket(event, 0), branch, votePeriod)
        return(1)
    # scalar
    elif(scalar(event) or categorical(event)):
        fxpScaledMax = EVENTS.getMaxValue(event)
        fxpScaledMin = EVENTS.getMinValue(event)
        if(categorical(event)):
            fxpScaledMin = ONE
            fxpScaledMax = ONE * EVENTS.getNumOutcomes(event)
        NONBINARYRESOLVE.resolveCategoricalOrScalar(fxpScaledMin, fxpScaledMax, event, EVENTS.getMarket(event, 0), branch, votePeriod)
        return(1)
    # (should never be reached)
    else:
        return(0)

macro roundTwoBondCheckPreconditions():
    market = EVENTS.getMarket(event, 0)
    forkPeriod = BRANCHES.getForkPeriod(branch)
    # means an event was created prior to a fork and hasn't been moved after the fork yet
    if(!eventCreatedPriorToFork(eventID)):
        MUTEX.release()
        return(-1)
    if(noVotes()):
        return(-3)
    if(msg.value < 1000000 * tx.gasprice):
        MUTEX.release()
        return(-2)

macro loseBond():
    # lose bond
    REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), bond)
    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), bond)
    # and set final outcome / event bond, etc
    if(!self.resolve(branch, event)):
        ~invalid()
    # rep redistribution from original period/orig. outcome stands, rep redistribution from round 2 happens as usual as well
    BACKSTOPS.setFinal(event)
    BACKSTOPS.setBondReturned(event)
    BACKSTOPS.doRoundTwoRefund(sender, event)

macro returnRoundTwoBondInForkScenario():
    # return the bond
    REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), bond)
    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), bond)
    BACKSTOPS.setBondReturned(event)
    BACKSTOPS.setRoundTwo(event, 0)
    BACKSTOPS.doRoundTwoRefund(sender, event)

macro returnBond():
    # return the bond
    REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), bond)
    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, BACKSTOPS.getBondPoster(event)), bond)
    # and set final outcome / event bond, etc
    if(!self.resolve(branch, event)):
        ~invalid()
    # reward the bonded challenger with whatever rep would normally be taken from the liars up to 2x the bond, then beyond that the people who originally reported whatever the actual truth was would get the rest. then regular rep redistribution for the round 2 reporting
    BACKSTOPS.setFinal(event)
    BACKSTOPS.setBondReturned(event)
    BACKSTOPS.doRoundTwoRefund(sender, event)

macro noVotes():
    !EXPEVENTS.getCurrentModeItems(votePeriod, event)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)