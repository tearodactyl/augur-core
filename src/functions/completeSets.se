# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addOrder:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOrderIDs:[int256]:int256[], getOriginalTradingPeriod:[int256]:int256, getOutcomeShareContract:[int256,int256]:int256, getOutcomeShareWallet:[int256,int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPrevID:[int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:uint256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalOrders:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[],int256[]]:int256, modifyMarketVolume:[int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, removeOrderFromMarket:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:int256, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setController:[address]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

extern shareTokens: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:int256, changeTokens:[int256,int256]:int256, createShares:[address,uint256]:int256, destroyShares:[address,uint256]:int256, getDecimals:[]:int256, getName:[]:int256, getSymbol:[]:int256, modifySupply:[int256]:int256, setController:[address]:int256, suicideFunds:[address]:_, totalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')
inset('../macros/float.sem')

data controller

event CompleteSets(sender: indexed, market: indexed, type: indexed, fxpAmount, numOutcomes, fxpFee, timestamp)

### Allows users to buy/sell sets of every outcome, so 500 complete sets in a 3 outcome market is 500 of outcome 1, 2, and 3 each respectively

def init():
    self.controller = 0x0

# Buys fxpAmount shares of every outcome in the specified market
def publicBuyCompleteSets(market: address, fxpAmount: uint256):
    refund()
    MUTEX.acquire()
    self.buyCompleteSets(msg.sender, market, fxpAmount)
    MUTEX.release()
    return(1)

# Sells fxpAmount shares of every outcome in the specified market
def publicSellCompleteSets(market: address, fxpAmount: uint256):
    refund()
    MUTEX.acquire()
    self.sellCompleteSets(msg.sender, market, fxpAmount)
    MUTEX.release()
    return(1)

def buyCompleteSets(sender: address, market: address, fxpAmount: uint256):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)

    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    cumulativeScale = MARKETS.getCumulativeScale(market)
    cost = safeFxpMul(fxpAmount, cumulativeScale)
    # Check preconditions
    if(fxpAmount == 0):
        ~invalid()
    if(!MARKETS.getMarketNumOutcomes(market)):
        ~invalid()

    # Send money from the user's account to the market's address/account
    if(!INFO.getCurrency(market).transferFrom(sender, INFO.getWallet(market), cost)):
        ~invalid()
    # Send shares of the event to the user's address, and increment the number
    # issued in the market for each outcome
    n = 1
    while(n <= numOutcomes):
        MARKETS.getOutcomeShareContract(market, n).createShares(sender, fxpAmount)
        n += 1
    log(type = CompleteSets, sender, market, 1, fxpAmount, numOutcomes, 0, block.timestamp)
    return(1)

# Sells fxpAmount of every outcome [if user owns it]
def sellCompleteSets(sender: address, market: address, fxpAmount: uint256):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)

    numOutcomes = MARKETS.getMarketNumOutcomes(market)
    cumulativeScale = MARKETS.getCumulativeScale(market)
    cost = safeFxpMul(fxpAmount, cumulativeScale)
    # Check preconditions
    if(fxpAmount == 0):
        ~invalid()
    n = 1
    while(n <= numOutcomes):
        if(MARKETS.getParticipantSharesPurchased(market, sender, n) < fxpAmount):
            ~invalid()
        n += 1

    # Takes shares away from participant and decreases the amount issued in the
    # market since we're exchanging complete sets
    n = 1
    while(n <= numOutcomes):
        MARKETS.getOutcomeShareContract(market, n).destroyShares(sender, fxpAmount)
        n += 1
    # Send funds from the market to the user's account
    fee = safeFxpMul(safeFxpMul(MARKETS.getTradingFee(market), fxpAmount), cumulativeScale)
    if(!INFO.getWallet(market).transfer(sender, safeSub(cost, fee))):
        ~invalid()
    if(!INFO.getWallet(market).transfer(INFO.getCreator(market), safeDiv(fee, 2))):
        ~invalid()
    log(type = CompleteSets, sender, market, 2, fxpAmount, numOutcomes, fee, block.timestamp)
    return(1)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)
