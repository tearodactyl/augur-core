# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setController:[address]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, suicideFunds:[address]:_, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:int256, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setController:[address]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addOrder:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOrderIDs:[int256]:int256[], getOriginalTradingPeriod:[int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPrevID:[int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:int256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalOrders:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[]]:int256, modifyParticipantShares:[int256,int256,int256,int256,int256]:int256, modifyShares:[int256,int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, removeOrderFromMarket:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

EVENTS = self.controller.lookup('events')
extern events: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, addReportersPaidSoFar:[int256]:int256, getBond:[int256]:int256, getChallenged:[int256]:int256, getCreationTime:[int256]:int256, getEarlyResolutionBond:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventInfo:[int256]:int256[], getEventPushedUp:[int256]:int256, getEventResolution:[int256]:bytes, getExpiration:[int256]:int256, getExtraBond:[int256]:int256, getExtraBondPoster:[int256]:int256, getFirstPreliminaryOutcome:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForkResolveAddress:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getMode:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportersPaidSoFar:[int256]:int256, getReportingThreshold:[int256]:int256, getResolutionAddress:[int256]:int256, getResolutionLength:[int256]:int256, getResolveBondPoster:[int256]:int256, getUncaughtOutcome:[int256]:int256, initializeEvent:[int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setChallenged:[int256]:int256, setController:[address]:int256, setCreationTime:[int256]:int256, setEarlyResolutionBond:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setExtraBond:[int256,int256]:int256, setExtraBondPoster:[int256,int256]:int256, setFirstPreliminaryOutcome:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setMode:[int256,int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256, suicideFunds:[address]:_]

ORDERS = self.controller.lookup('orders')
extern orders: [checkHash:[int256,int256]:int256, commitOrder:[int256]:int256, fillOrder:[int256,int256,int256,int256]:int256, getAmount:[int256]:int256, getID:[int256]:int256, getOrder:[int256]:int256[], getOrderOwner:[int256]:int256, getPrice:[int256]:int256, getType:[int256]:int256, makeOrderHash:[int256,int256,int256]:int256, removeOrder:[int256]:int256, saveOrder:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

EXPEVENTS = self.controller.lookup('expiringEvents')
extern expiringEvents: [addEvent:[int256,int256,int256,int256,int256,int256,int256]:int256, addReportToReportsSubmitted:[int256,int256,int256]:int256, addRoundTwo:[int256,int256]:int256, addToWeightOfReport:[int256,int256,int256,int256]:int256, adjustPeriodFeeValue:[int256,int256,int256]:int256, countReportAsSubmitted:[int256,int256,int256,int256,int256]:int256, deleteEvent:[int256,int256,int256]:int256, getActiveReporters:[int256,int256,int256,int256]:int256[], getAfterFork:[int256,int256]:int256, getAfterRep:[int256,int256,int256]:int256, getBeforeRep:[int256,int256,int256]:int256, getCurrentMode:[int256,int256]:int256, getCurrentModeItems:[int256,int256]:int256, getEthicReport:[int256,int256,int256,int256]:int256, getEvent:[int256,int256,int256]:int256, getEventIndex:[int256,int256,int256]:int256, getEventWeight:[int256,int256,int256]:int256, getEvents:[int256,int256]:int256[], getEventsRange:[int256,int256,int256,int256]:int256[], getFeeValue:[int256,int256]:int256, getLesserReportNum:[int256,int256,int256]:int256, getNumActiveReporters:[int256,int256]:int256, getNumEventsToReportOn:[int256,int256]:int256, getNumRemoved:[int256,int256]:int256, getNumReportsSubmitted:[int256,int256,int256]:int256, getNumRequired:[int256,int256]:int256, getNumRoundTwo:[int256,int256]:int256, getNumberEvents:[int256,int256]:int256, getPeriodDormantRep:[int256,int256,int256]:int256, getPeriodRepWeight:[int256,int256,int256]:int256, getReport:[int256,int256,int256,int256]:int256, getRequired:[int256,int256,int256]:int256, getSubsidy:[int256,int256,int256]:int256, getWeightOfReport:[int256,int256,int256]:int256, moveEvent:[int256,int256]:int256, refundCost:[int256,int256,int256,int256]:int256, removeEvent:[int256,int256]:int256, setAfterRep:[int256,int256,int256,int256]:int256, setBeforeRep:[int256,int256,int256,int256]:int256, setController:[address]:int256, setCurrentMode:[int256,int256,int256]:int256, setCurrentModeItems:[int256,int256,int256]:int256, setEthicReport:[int256,int256,int256,int256,int256]:int256, setEventRequired:[int256,int256,int256]:int256, setEventWeight:[int256,int256,int256,int256]:int256, setLesserReportNum:[int256,int256,int256,int256]:int256, setNumEventsToReportOn:[int256]:int256, setPeriodDormantRep:[int256,int256,int256,int256]:int256, setPeriodRepWeight:[int256,int256,int256,int256]:int256, setReport:[int256,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

COMPLETESETS = self.controller.lookup('completeSets')
extern completeSets: [buyCompleteSets:[address,address,uint256]:int256, publicBuyCompleteSets:[address,uint256]:int256, publicSellCompleteSets:[address,uint256]:int256, sellCompleteSets:[address,address,uint256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')
inset('../macros/logReturn.sem')
inset('../macros/float.sem')

data controller

event logPrice(market:indexed, sender:indexed, owner:indexed, type, price, amount, timestamp, orderID, outcome, askerSharesFilled, askerMoneyFilled, bidderSharesFilled, bidderMoneyFilled)
event tradeLogReturn(returnValue)

macro MIN_TRADE_VALUE: 10000000000000000
# Trade types
macro BID: 1
macro ASK: 2
# Field counts
macro ORDER_FIELDS: 10
# Boolean success/failure
macro SUCCESS: 1

# removes a order from the book
macro removeOrder($orderID, $market):
    ORDERS.removeOrder($orderID)
    MARKETS.removeOrderFromMarket($market, $orderID)

def init():
    self.controller = 0x0

# Filling a bid [aka selling shares]
# Users need to have approved markets to spend their money, simulate fill client side to check in case an order is invalid due to someone not having approved
# Scenarios:
    # Asker has maxValue - price and expects complete set minus the one theyre selling
    # Or asker has shares and expects to be paid price - minValue for them
    # Bidder owns all shares except the one theyre buying and has escrowed them and wants to pay price - minValue for the share and then sell the complete set for range thus getting maxValue - price at the end
    # Or bidder has escrowed price - minValue for their shares
def fillBid(orderID, amountTakerWants):
    self.controller.assertIsWhitelisted(msg.sender)
    # Get order
    order = array(ORDER_FIELDS)
    order = ORDERS.getOrder(orderID, outitems = ORDER_FIELDS)
    if(!order[0]):
        MUTEX.release()
        return([0]: arr)
    type = order[1]
    market = order[2]
    creator = INFO.getCreator(market)
    amount = order[3]
    price = order[4]
    owner = order[5]
    outcome = order[7]
    moneyEscrowed = order[8]
    sharesEscrowed = order[9]
    checkTradePreconditions()
    branch = MARKETS.getBranch(market)
    cumulativeScale = MARKETS.getCumulativeScale(market)
    orderInfo = array(4)
    orderInfo[0] = market
    orderInfo[1] = outcome
    orderInfo[2] = type
    orderInfo[3] = msg.sender
    orderHash = sha3(orderInfo, items = 4)
    if(ORDERS.checkHash(orderHash, msg.sender) == -1):
        MUTEX.release()
        return([-1]: arr)
    maxValue = EVENTS.getMaxValue(MARKETS.getMarketEvent(market))
    minValue = 0
    # for categorical events the min is one
    if(EVENTS.getNumOutcomes(MARKETS.getMarketEvent(market)) > 2):
        minValue = ONE
    else:
        minValue = EVENTS.getMinValue(MARKETS.getMarketEvent(market))
    sumOfFills = 0
    # all in shares including the money filled here [money filled means shares that were filled via exchanging money as opposed to shares already owned by either respective party]
    askerSharesFilled = 0
    askerMoneyFilled = 0
    bidderSharesFilled = 0
    bidderMoneyFilled = 0
    accountForBidderClosingShort()
    accountForRegularBidWithMoney()
    updateBidOrderWithFillInfo()
    accountForRegularSellerFillingABid()
    accountForShortSelling()
    # send bidder shares from asker
    MARKETS.modifyParticipantShares(market, msg.sender, outcome, -sumOfFills, 1)
    MARKETS.modifyParticipantShares(market, owner, outcome, sumOfFills, 0)
    sellMakersCompleteSets()
    # transfer (price - minValue) * bidderSharesFilled to market from bidder since market hasnt been paid yet after complete sets selling. The bidder has already paid for bidderMoneyFilled by escrowing their money
    bidderHasntPaidMarket = bidderSharesFilled and !INFO.getCurrency(market).transferFrom(owner, market, safeFxpMul(safeSub(price, minValue), bidderSharesFilled))
    # Transfer money from person who bid to the person here who is selling/asker [bidder has already sent/escrowed the cash to/with the market when submitting bid so this comes from the market]
    askerNotPaid = !INFO.getWallet(market).transfer(msg.sender, safeFxpMul(safeSub(price, minValue), sumOfFills))
    # transfer range * askerMoneyFilled to the market from asker for the amount of shares in askerMoneyFilled, for askerSharesFilled the asker simply has sent their shares to the bidder and thus doesn't have to put up money
    askerHasntPaidMarket = askerMoneyFilled and !INFO.getCurrency(market).transferFrom(msg.sender, market, safeFxpMul(cumulativeScale, askerMoneyFilled))
    if(bidderHasntPaidMarket or askerHasntPaidMarket or askerNotPaid):
        ~invalid()
    sellTakerCompleteSetsIfAny()
    # Log transaction [ASK b/c it's filling a bid so from trader's perspective they're asking]
    log(type = logPrice, market, msg.sender, owner, ASK, price, sumOfFills, block.timestamp, orderID, outcome, askerSharesFilled, askerMoneyFilled, bidderSharesFilled, bidderMoneyFilled)
    MARKETS.setPrice(market, outcome, price)
    return([SUCCESS, amountTakerWants]: arr)

macro sellMakersCompleteSets():
    sharesHeld = -1
    i = 1
    while(i <= MARKETS.getMarketNumOutcomes(market)):
        sharesHeld = min(MARKETS.getParticipantSharesPurchased(market, owner, i), sharesHeld)
        i += 1
    if(sharesHeld):
        i = 1
        while(i <= MARKETS.getMarketNumOutcomes(market)):
            MARKETS.modifyShares(market, i, -sharesHeld)
            MARKETS.modifyParticipantShares(market, owner, i, -sharesHeld, 0)
            i += 1
        cost = safeFxpMul(sharesHeld, cumulativeScale)
        # send funds from the market to the user acc.
        fee = safeFxpMul(safeFxpMul(MARKETS.getTradingFee(market), sharesHeld), cumulativeScale)
        if(!INFO.getWallet(market).transfer(owner, safeSub(cost, fee))):
            ~invalid()
        # if still before voting period has started count it in the share value for the period and market to target # of reporters to be higher in markets w/ more outstanding value
        notVotingOnYet = BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)
        if(notVotingOnYet):
            MARKETS.modifySharesValue(market, safeFxpMul(-sharesHeld, cumulativeScale))
        currency = INFO.getCurrency(market)
        if(!INFO.getWallet(market).transfer(INFO.getCreator(market), safeDiv(fee, 2))):
            ~invalid()

macro sellTakerCompleteSetsIfAny():
    sharesHeld = -1
    i = 1
    while(i <= MARKETS.getMarketNumOutcomes(market)):
        sharesHeld = min(MARKETS.getParticipantSharesPurchased(market, msg.sender, i), sharesHeld)
        i += 1
    # Sell the asker's [msg.sender] complete sets if they have any
    if(sharesHeld):
        if(!COMPLETESETS.sellCompleteSets(market, sharesHeld, call = delegate)):
            ~invalid()

macro accountForBidderClosingShort():
    if(sharesEscrowed):
        fill = min(sharesEscrowed, amountTakerWants)
        amountTakerWants = safeSub(amountTakerWants, fill)
        sumOfFills = safeAdd(sumOfFills, fill)
        bidderSharesFilled = fill
        # send shares [amount is fill] escrowed by bidder back to bidder
        i = 1
        while(i <= MARKETS.getMarketNumOutcomes(market)):
            if(i != outcome):
                # CREATE/DESTROY SHARES
                MARKETS.modifyParticipantShares(market, owner, i, fill, 0)
            i += 1

macro accountForRegularBidWithMoney():
    if(amountTakerWants and moneyEscrowed):
        fill = min(safeFxpDiv(moneyEscrowed, safeSub(price, minValue)), amountTakerWants)
        amountTakerWants = safeSub(amountTakerWants, fill)
        sumOfFills = safeAdd(sumOfFills, fill)
        bidderMoneyFilled = fill

macro updateBidOrderWithFillInfo():
    remainderToFill = sumOfFills
    # Calculate value
    value = safeFxpMul(sumOfFills, price)
    # must fill at least 0.00000001 in value
    if(value < MIN_TRADE_VALUE):
        ~invalid()
    # Update order amount or remove
    if(sumOfFills < amount):
        ORDERS.fillOrder(orderID, sumOfFills, safeFxpMul(bidderMoneyFilled, safeSub(price, minValue)), bidderSharesFilled)
    else:
        removeOrder(orderID, market)

macro accountForRegularSellerFillingABid():
    balance = MARKETS.getParticipantSharesPurchased(market, msg.sender, outcome)
    # msg.sender owns shares of outcome
    if(balance):
        fill = min(balance, remainderToFill)
        askerSharesFilled = fill
        remainderToFill = safeSub(remainderToFill, fill)

macro accountForShortSelling():
    if(remainderToFill):
        # issue asker complete sets for remainder amount and dont charge yet
        i = 1
        while(i <= MARKETS.getMarketNumOutcomes(market)):
            MARKETS.modifyShares(market, i, remainderToFill)
            # CREATE/DESTROY SHARES
            MARKETS.modifyParticipantShares(market, msg.sender, i, remainderToFill, 0)
            i += 1
        askerMoneyFilled = remainderToFill
        remainderToFill = 0
        # if still before voting period has started count the share value
        notVotingOnYet = BRANCHES.getVotePeriod(branch) < MARKETS.getTradingPeriod(market)
        if(notVotingOnYet):
            MARKETS.modifySharesValue(market, safeFxpMul(askerMoneyFilled, cumulativeScale))
            fee = safeFxpMul(safeFxpMul(MARKETS.getTradingFee(market), askerMoneyFilled), cumulativeScale)
            feesInWei = safeFxpMul(BRANCHES.getCurrencyRate(branch, INFO.getCurrency(market)), safeDiv(fee, 2))
            if(!feesInWei):
                ~invalid()
            MARKETS.addFees(market, feesInWei)
            EXPEVENTS.adjustPeriodFeeValue(branch, MARKETS.getTradingPeriod(market), feesInWei)

macro checkTradePreconditions():
    if(owner == msg.sender):
        MUTEX.release()
        return([-3]: arr)
    # Make sure the order has been mined, obvious HFT prevention
    if(block.number <= order[6]):
        MUTEX.release()
        return([-2]: arr)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)