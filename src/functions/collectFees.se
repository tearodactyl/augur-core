# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

### Used to allow users to collect fees from reporting

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setController:[address]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, suicideFunds:[address]:_, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

EXPEVENTS = self.controller.lookup('expiringEvents')
extern expiringEvents: [addEvent:[int256,int256,int256,int256,int256,int256,int256]:int256, addReportToReportsSubmitted:[int256,int256,int256]:int256, addRoundTwo:[int256,int256]:int256, addToWeightOfReport:[int256,int256,int256,int256]:int256, adjustPeriodFeeValue:[int256,int256,int256]:int256, countReportAsSubmitted:[int256,int256,int256,int256,int256]:int256, deleteEvent:[int256,int256,int256]:int256, getActiveReporters:[int256,int256,int256,int256]:int256[], getAfterFork:[int256,int256]:int256, getAfterRep:[int256,int256,int256]:int256, getBeforeRep:[int256,int256,int256]:int256, getCurrentMode:[int256,int256]:int256, getCurrentModeItems:[int256,int256]:int256, getEthicReport:[int256,int256,int256,int256]:int256, getEvent:[int256,int256,int256]:int256, getEventIndex:[int256,int256,int256]:int256, getEventWeight:[int256,int256,int256]:int256, getEvents:[int256,int256]:int256[], getEventsRange:[int256,int256,int256,int256]:int256[], getFeeValue:[int256,int256]:int256, getLesserReportNum:[int256,int256,int256]:int256, getNumActiveReporters:[int256,int256]:int256, getNumEventsToReportOn:[int256,int256]:int256, getNumRemoved:[int256,int256]:int256, getNumReportsSubmitted:[int256,int256,int256]:int256, getNumRequired:[int256,int256]:int256, getNumRoundTwo:[int256,int256]:int256, getNumberEvents:[int256,int256]:int256, getPeriodDormantRep:[int256,int256,int256]:int256, getPeriodRepWeight:[int256,int256,int256]:int256, getReport:[int256,int256,int256,int256]:int256, getRequired:[int256,int256,int256]:int256, getSubsidy:[int256,int256,int256]:int256, getWeightOfReport:[int256,int256,int256]:int256, moveEvent:[int256,int256]:int256, refundCost:[int256,int256,int256,int256]:int256, removeEvent:[int256,int256]:int256, setAfterRep:[int256,int256,int256,int256]:int256, setBeforeRep:[int256,int256,int256,int256]:int256, setController:[address]:int256, setCurrentMode:[int256,int256,int256]:int256, setCurrentModeItems:[int256,int256,int256]:int256, setEthicReport:[int256,int256,int256,int256,int256]:int256, setEventRequired:[int256,int256,int256]:int256, setEventWeight:[int256,int256,int256,int256]:int256, setLesserReportNum:[int256,int256,int256,int256]:int256, setNumEventsToReportOn:[int256]:int256, setPeriodDormantRep:[int256,int256,int256,int256]:int256, setPeriodRepWeight:[int256,int256,int256,int256]:int256, setReport:[int256,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

CONSENSUS = self.controller.lookup('consensusData')
extern consensusData: [decreaseDenominator:[int256,int256,int256]:int256, doRefund:[int256,int256]:int256, getBaseReportersLastPeriod:[int256]:int256, getDenominator:[int256,int256]:int256, getFeeFirst:[int256,int256]:int256, getFeesCollected:[int256,int256,int256,int256]:int256, getNotEnoughPenalized:[int256,int256,int256]:int256, getPenalized:[int256,int256,int256,int256]:int256, getPenalizedNum:[int256,int256,int256]:int256, getPenalizedUpTo:[int256,int256]:int256, getPeriodBalance:[int256,int256]:int256, getRepCollected:[int256,int256,int256]:int256, getRepRedistributionDone:[int256,int256]:int256, getSlashed:[int256,int256,int256]:int256, increaseDenominator:[int256,int256,int256]:int256, increasePenalizedNum:[int256,int256,int256,int256]:int256, setBaseReportersLastPeriod:[int256,int256]:int256, setController:[address]:int256, setFeeFirst:[int256,int256,int256]:int256, setFeesCollected:[int256,int256,int256,int256]:int256, setNotEnoughPenalized:[int256,int256,int256]:int256, setPenalized:[int256,int256,int256,int256]:int256, setPenalizedUpTo:[int256,int256,int256]:int256, setPeriodBalance:[int256,int256,int256]:int256, setRefund:[int256,int256]:int256, setRepCollected:[int256,int256,int256]:int256, setSlashed:[int256,int256,int256]:int256, suicideFunds:[address]:_]

REPORTING = self.controller.lookup('reporting')
extern reporting: [addDormantRep:[int256,int256,int256]:int256, addRep:[int256,int256,int256]:int256, addReporter:[int256,int256,int256,int256,int256]:int256, adjustActiveRep:[int256,int256]:int256, balanceOfReporter:[int256,int256]:int256, claimInitialRepFromRepContract:[]:int256, getActiveRep:[int256]:int256, getDormantRepByIndex:[int256,int256]:int256, getNumberReporters:[int256]:int256, getRepBalance:[int256,int256]:int256, getRepByIndex:[int256,int256]:int256, getReportedOnNonFinalRoundTwoEvent:[int256,int256]:int256, getReporterID:[int256,int256]:int256, getReputation:[int256]:int256[], getTotalRep:[int256]:int256, repIDToIndex:[int256,int256]:int256, setController:[address]:int256, setInitialReporters:[int256]:int256, setRep:[int256,int256,int256]:int256, setReportedOnNonFinalRoundTwoEvent:[int256,int256,int256]:int256, subtractDormantRep:[int256,int256,int256]:int256, subtractRep:[int256,int256,int256]:int256, suicideFunds:[address]:_, totalSupply:[int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')
inset('../macros/periodStage.sem')
inset('../macros/float.sem')

data controller

# Allows a user to collect redistributed rep earned at the end of a period
# Errors:
    #  0: rep already collected
    # -1: rep redistribution/rewards/penalizations in consensus not done yet
    # -2: needs to be second half of reporting period to claim rep [1st half is when redistribution is done]
# 2 means no errors but didnt report last period
def init():
    self.controller = 0x0

def collectRep(branch, sender):
    if (!isCallerWhitelisted()):
        MUTEX.acquire()
    periodLength = BRANCHES.getPeriodLength(branch)
    votePeriod = BRANCHES.getVotePeriod(branch)
    lastPeriod = votePeriod - 1
    newRep = EXPEVENTS.getAfterRep(branch, lastPeriod, sender)
    repCollected = CONSENSUS.getRepCollected(branch, sender, lastPeriod)
    denominator = CONSENSUS.getDenominator(branch, lastPeriod)
    checkCollectRepPreconditions()
    # need 1 rep to claim fees
    if(newRep < ONE):
        prepareInfoForConsensus()
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(2)
    collectRedistributedRep()
    prepareInfoForConsensus()
    if(!isCallerWhitelisted()):
        MUTEX.release()
    return(1)

# Allows a user to collect trading fees earned at the end of a period
# Errors:
    #  0: fees already collected
    # -1: rep redistribution/rewards/penalizations in consensus not done yet
    # -2: needs to be second half of reporting period to claim fees [1st half is when redistribution is done]
    # -3: rep not collected yet
# 2 means no errors but didnt report last period
def collectFees(branch, sender, currency):
    if (!isCallerWhitelisted()):
        MUTEX.acquire()
    periodLength = BRANCHES.getPeriodLength(branch)
    votePeriod = BRANCHES.getVotePeriod(branch)
    lastPeriod = votePeriod - 1
    newRep = EXPEVENTS.getAfterRep(branch, lastPeriod, sender)
    repCollected = CONSENSUS.getRepCollected(branch, sender, lastPeriod)
    denominator = CONSENSUS.getDenominator(branch, lastPeriod)
    checkCollectFeesPreconditions()
    # need 1 rep to claim fees
    if(newRep < ONE):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(2)
    collectTradeFees()
    if(!isCallerWhitelisted()):
        MUTEX.release()
    return(1)

macro checkCollectRepPreconditions():
    atSecondHalfOfPeriod()
    if(!CONSENSUS.getRepRedistributionDone(branch, sender)):
        # need to call penalize for all events and penalize for too lazy to report or catchup if necessary
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(-1)
    if(repCollected):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(0)

macro checkCollectFeesPreconditions():
    atSecondHalfOfPeriod()
    if(!CONSENSUS.getRepRedistributionDone(branch, sender)):
        # need to call penalize for all events and penalize for too lazy to report or catchup if necessary
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(-1)
    feesCollected = CONSENSUS.getFeesCollected(branch, sender, lastPeriod, currency)
    if(feesCollected):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(0)
    if(!repCollected):
        return(-3)

macro collectRedistributedRep():
    # sets the amount of rep available for redistribution in this redistribution period
    if(!CONSENSUS.getFeeFirst(branch, lastPeriod)):
        CONSENSUS.setFeeFirst(branch, lastPeriod, 1)
        CONSENSUS.setPeriodBalance(branch, lastPeriod, REPORTING.getRepBalance(branch, branch))
    gainedRep = safeFxpDiv(safeFxpMul(newRep, CONSENSUS.getPeriodBalance(branch, lastPeriod)), denominator)
    # if a user lost rep their newRep should be == EXPEVENTS.getAfterRep(branch, period, sender) + gainedRep
    # if gained rep overall their newRep should be == EXPEVENTS.getBeforeRep(branch, period, sender) + gainedRep
    # give a reporter their portion of redistributed rep
    REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, branch), gainedRep)
    REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, sender), gainedRep)

macro collectTradeFees():
    initialBalance = BRANCHES.getInitialBalance(branch, lastPeriod, currency)
    if(!initialBalance):
        # set amount of fees to be distributed in this period from the branch
        BRANCHES.setInitialBalance(branch, lastPeriod, currency.balanceOf(BRANCHES.getBranchWallet(branch, currency)), currency)
    fees = safeFxpDiv(safeFxpMul(newRep, initialBalance), denominator)
    # give a reporter their portion of the trading fees
    BRANCHES.getBranchWallet(branch, currency).transfer(sender, fees)
    CONSENSUS.setFeesCollected(branch, sender, lastPeriod, currency)

macro prepareInfoForConsensus():
    CONSENSUS.setRepCollected(branch, sender, lastPeriod)
    # return not reported enough bond if not enough penalized is 0
    if(!CONSENSUS.getNotEnoughPenalized(branch, sender, lastPeriod)):
        CONSENSUS.doRefund(sender, sender)
    # need to pay not reporting bond
    if(msg.value <= safeMul(500000, tx.gasprice)):
        ~invalid()
    balance = REPORTING.getRepBalance(branch, sender)
    dormantRep = REPORTING.balanceOfReporter(branch, sender)
    # Record rep for next report period before any redistributions
    EXPEVENTS.setBeforeRep(branch, votePeriod, balance, sender)
    EXPEVENTS.setAfterRep(branch, votePeriod, balance, sender)
    EXPEVENTS.setPeriodDormantRep(branch, votePeriod, dormantRep, sender)
    CONSENSUS.setRefund(sender, msg.value)
    if(!send(CONSENSUS, msg.value)):
        ~invalid()

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)