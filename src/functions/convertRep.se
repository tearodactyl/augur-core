# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setController:[address]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, suicideFunds:[address]:_, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

EVENTS = self.controller.lookup('events')
extern events: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, addReportersPaidSoFar:[int256]:int256, getBond:[int256]:int256, getChallenged:[int256]:int256, getCreationTime:[int256]:int256, getEarlyResolutionBond:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventInfo:[int256]:int256[], getEventPushedUp:[int256]:int256, getEventResolution:[int256]:bytes, getExpiration:[int256]:int256, getExtraBond:[int256]:int256, getExtraBondPoster:[int256]:int256, getFirstPreliminaryOutcome:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForkResolveAddress:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getMode:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportersPaidSoFar:[int256]:int256, getReportingThreshold:[int256]:int256, getResolutionAddress:[int256]:int256, getResolutionLength:[int256]:int256, getResolveBondPoster:[int256]:int256, getUncaughtOutcome:[int256]:int256, initializeEvent:[int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setChallenged:[int256]:int256, setController:[address]:int256, setCreationTime:[int256]:int256, setEarlyResolutionBond:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setExtraBond:[int256,int256]:int256, setExtraBondPoster:[int256,int256]:int256, setFirstPreliminaryOutcome:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setMode:[int256,int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256, suicideFunds:[address]:_]

CASH = self.controller.lookup('cash')
extern cash: [allowance:[address,address]:int256, approve:[address,uint256]:int256, balanceOf:[address]:int256, depositEther:[address]:int256, getDecimals:[]:int256, getInitiated:[]:int256, getName:[]:int256, getSymbol:[]:int256, publicDepositEther:[]:int256, publicWithdrawEther:[address,uint256]:int256, setController:[address]:int256, suicideFunds:[address]:_, totalSupply:[]:int256, transfer:[address,uint256]:int256, transferFrom:[address,address,uint256]:int256, withdrawEther:[address,address,uint256]:int256]

EXPEVENTS = self.controller.lookup('expiringEvents')
extern expiringEvents: [addEvent:[int256,int256,int256,int256,int256,int256,int256]:int256, addReportToReportsSubmitted:[int256,int256,int256]:int256, addRoundTwo:[int256,int256]:int256, addToWeightOfReport:[int256,int256,int256,int256]:int256, adjustPeriodFeeValue:[int256,int256,int256]:int256, countReportAsSubmitted:[int256,int256,int256,int256,int256]:int256, deleteEvent:[int256,int256,int256]:int256, getActiveReporters:[int256,int256,int256,int256]:int256[], getAfterFork:[int256,int256]:int256, getAfterRep:[int256,int256,int256]:int256, getBeforeRep:[int256,int256,int256]:int256, getCurrentMode:[int256,int256]:int256, getCurrentModeItems:[int256,int256]:int256, getEthicReport:[int256,int256,int256,int256]:int256, getEvent:[int256,int256,int256]:int256, getEventIndex:[int256,int256,int256]:int256, getEventWeight:[int256,int256,int256]:int256, getEvents:[int256,int256]:int256[], getEventsRange:[int256,int256,int256,int256]:int256[], getFeeValue:[int256,int256]:int256, getLesserReportNum:[int256,int256,int256]:int256, getNumActiveReporters:[int256,int256]:int256, getNumEventsToReportOn:[int256,int256]:int256, getNumRemoved:[int256,int256]:int256, getNumReportsSubmitted:[int256,int256,int256]:int256, getNumRequired:[int256,int256]:int256, getNumRoundTwo:[int256,int256]:int256, getNumberEvents:[int256,int256]:int256, getPeriodDormantRep:[int256,int256,int256]:int256, getPeriodRepWeight:[int256,int256,int256]:int256, getReport:[int256,int256,int256,int256]:int256, getRequired:[int256,int256,int256]:int256, getSubsidy:[int256,int256,int256]:int256, getWeightOfReport:[int256,int256,int256]:int256, moveEvent:[int256,int256]:int256, refundCost:[int256,int256,int256,int256]:int256, removeEvent:[int256,int256]:int256, setAfterRep:[int256,int256,int256,int256]:int256, setBeforeRep:[int256,int256,int256,int256]:int256, setController:[address]:int256, setCurrentMode:[int256,int256,int256]:int256, setCurrentModeItems:[int256,int256,int256]:int256, setEthicReport:[int256,int256,int256,int256,int256]:int256, setEventRequired:[int256,int256,int256]:int256, setEventWeight:[int256,int256,int256,int256]:int256, setLesserReportNum:[int256,int256,int256,int256]:int256, setNumEventsToReportOn:[int256]:int256, setPeriodDormantRep:[int256,int256,int256,int256]:int256, setPeriodRepWeight:[int256,int256,int256,int256]:int256, setReport:[int256,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

REPORTING = self.controller.lookup('reporting')
extern reporting: [addDormantRep:[int256,int256,int256]:int256, addRep:[int256,int256,int256]:int256, addReporter:[int256,int256,int256,int256,int256]:int256, adjustActiveRep:[int256,int256]:int256, balanceOfReporter:[int256,int256]:int256, claimInitialRepFromRepContract:[]:int256, getActiveRep:[int256]:int256, getDormantRepByIndex:[int256,int256]:int256, getNumberReporters:[int256]:int256, getRepBalance:[int256,int256]:int256, getRepByIndex:[int256,int256]:int256, getReportedOnNonFinalRoundTwoEvent:[int256,int256]:int256, getReporterID:[int256,int256]:int256, getReputation:[int256]:int256[], getTotalRep:[int256]:int256, repIDToIndex:[int256,int256]:int256, setController:[address]:int256, setInitialReporters:[int256]:int256, setRep:[int256,int256,int256]:int256, setReportedOnNonFinalRoundTwoEvent:[int256,int256,int256]:int256, subtractDormantRep:[int256,int256,int256]:int256, subtractRep:[int256,int256,int256]:int256, suicideFunds:[address]:_, totalSupply:[int256]:int256]

CATCHUP = self.controller.lookup('penalizationCatchup')
extern penalizationCatchup: [penalizationCatchup:[int256,int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

CONSENSUS = self.controller.lookup('consensusData')
extern consensusData: [decreaseDenominator:[int256,int256,int256]:int256, doRefund:[int256,int256]:int256, getBaseReportersLastPeriod:[int256]:int256, getDenominator:[int256,int256]:int256, getFeeFirst:[int256,int256]:int256, getFeesCollected:[int256,int256,int256,int256]:int256, getNotEnoughPenalized:[int256,int256,int256]:int256, getPenalized:[int256,int256,int256,int256]:int256, getPenalizedNum:[int256,int256,int256]:int256, getPenalizedUpTo:[int256,int256]:int256, getPeriodBalance:[int256,int256]:int256, getRepCollected:[int256,int256,int256]:int256, getRepRedistributionDone:[int256,int256]:int256, getSlashed:[int256,int256,int256]:int256, increaseDenominator:[int256,int256,int256]:int256, increasePenalizedNum:[int256,int256,int256,int256]:int256, setBaseReportersLastPeriod:[int256,int256]:int256, setController:[address]:int256, setFeeFirst:[int256,int256,int256]:int256, setFeesCollected:[int256,int256,int256,int256]:int256, setNotEnoughPenalized:[int256,int256,int256]:int256, setPenalized:[int256,int256,int256,int256]:int256, setPenalizedUpTo:[int256,int256,int256]:int256, setPeriodBalance:[int256,int256,int256]:int256, setRefund:[int256,int256]:int256, setRepCollected:[int256,int256,int256]:int256, setSlashed:[int256,int256,int256]:int256, suicideFunds:[address]:_]

INCREMENTPERIOD = self.controller.lookup('incrementPeriod')
extern incrementPeriod: [incrementPeriodAfterReporting:[int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

REPCONTRACT = self.controller.lookup('repContract')
extern repContract: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, getRidOfDustForLaunch:[]:int256, getSeeded:[]:uint256, name:[]:uint256, setSaleDistribution:[address[],uint256[]]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

BACKSTOPS = self.controller.lookup('backstops')
extern backstops: [adjForkBondPaid:[int256,int256]:int256, doRoundTwoRefund:[int256,int256]:int256, getBondAmount:[int256]:int256, getBondPaid:[int256]:int256, getBondPoster:[int256]:int256, getBondReturned:[int256]:int256, getDisputedOverEthics:[int256]:int256, getFinal:[int256]:int256, getForkBondPaid:[int256]:int256, getForkBondPoster:[int256]:int256, getForkedOverEthicality:[int256]:int256, getMoved:[int256]:int256, getOriginalBranch:[int256]:int256, getOriginalEthicality:[int256]:int256, getOriginalOutcome:[int256]:int256, getOriginalVotePeriod:[int256]:int256, getResolved:[int256,int256]:int256, getRoundTwo:[int256]:int256, increaseBondPaid:[int256,int256]:int256, setBondAmount:[int256,int256]:int256, setBondPoster:[int256,int256]:int256, setBondReturned:[int256]:int256, setController:[address]:int256, setDisputedOverEthics:[int256]:int256, setFinal:[int256]:int256, setForkBondPoster:[int256,int256]:int256, setForkedOverEthicality:[int256]:int256, setMoved:[int256]:int256, setOriginalBranch:[int256,int256]:int256, setOriginalEthicality:[int256,int256]:int256, setOriginalOutcome:[int256,int256]:int256, setOriginalVotePeriod:[int256,int256]:int256, setResolved:[int256,int256,int256]:int256, setRoundTwo:[int256,int256]:int256, setRoundTwoRefund:[int256,int256]:int256, suicideFunds:[address]:_]

CLAIMINITIALREP = self.controller.lookup('claimInitialRep')
extern claimInitialRep: [claimInitialRep:[int256,int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

inset('../macros/refund.sem')
inset('../macros/periodStage.sem')
inset('../macros/float.sem')

# sender/owner, then spender
data amountCanSpend[][](branch[])

data controller

event Transfer(from:indexed, to:indexed, value)
event Approval(owner:indexed, spender:indexed, branch:indexed, value)

macro 48_HOURS: 172800
macro ONE_MONTH: 2419200

### Allows sending of rep and conversion between dormant and active rep

# send active reputation
# @return fxpValue of reputation sent
# error messages otherwise
    # 0: only one period behind, need to do penalizations for it
    # -1: "Your reputation account was just created, earn some rep. before you can send to others"
    # -2: not in right part of period
    # -3: "Receiving address doesn't exist"
    # -4: couldn't catchup automatically
    # -5: not enough rep / fxpValue too small or not authorized
    # -6: if a person reported on a round 2 event before it was in the second round [i.e. the first reporting backstop], they cannot convert their rep to dormant or send rep until they've finished the resolution process for that round 2 event
        # Notes:
            # say you lost rep in round 1, if it was a valid round 2 you have incentive to not convert to dormant or send rep b/c you want to get it back
            # say you gained rep in round 1, if it was a valid round 2 you have incentive _to_ convert to dormant
            # say you lost rep in round 1, if it was an invalid round 2 you have incentive to convert to dormant
            # say you gained rep in round 1, if it was an invalid round 2 you have incentive _to_ not convert to dormant or send rep b/c you want to keep it
def init():
    self.controller = 0x0

# Convert active rep to dormant rep
# error messages
    #  0: only one period behind, need to do penalizations for it
    # -1: sender's rep account didn't exist, just made one
    # -2: not in right part of period
    # -4: couldn't catchup automatically
    # -5: not enough rep / fxpValue too small
    # -6: if a person reported on a round 2 event before it was in the second round [i.e. the first reporting backstop], they cannot convert their rep to dormant or send rep until they've finished the resolution process for that round 2 event
        # Notes:
            # say you lost rep in round 1, if it was a valid round 2 you have incentive to not convert to dormant or send rep b/c you want to get it back
            # say you gained rep in round 1, if it was a valid round 2 you have incentive _to_ convert to dormant
            # say you lost rep in round 1, if it was an invalid round 2 you have incentive to convert to dormant
            # say you gained rep in round 1, if it was an invalid round 2 you have incentive _to_ not convert to dormant or send rep b/c you want to keep it
def convertToDormantRep(branch, fxpValue):
    MUTEX.acquire()
    checkInvariants(msg.sender)
    refund()
    # auto increment vote period if needed
    INCREMENTPERIOD.incrementPeriodAfterReporting(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    votePeriod = BRANCHES.getVotePeriod(branch)
    lastPeriod = votePeriod - 1
    lastPeriodPenalized = 0
    lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(branch, $account)
    delta = lastPeriod - lastPeriodPenalized
    # Rep cannot be simultaneously spent (transferred) and used to vote
    atFirstHalfOfPeriod()

    if(delta > 1 and CATCHUP.penalizationCatchup(branch, $account) != 1):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(-4)
    if(!CONSENSUS.getRepRedistributionDone(branch, $account)):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(0)

    senderIndex = REPORTING.repIDToIndex(branch, msg.sender)
    senderBalance = REPORTING.getRepBalance(branch, msg.sender)
    senderDormantBalance = REPORTING.balanceOfReporter(branch, msg.sender)
    reportedOnRoundTwoEvent = REPORTING.getReportedOnNonFinalRoundTwoEvent(branch, msg.sender)
    if(reportedOnRoundTwoEvent and !BACKSTOPS.getFinal(reportedOnRoundTwoEvent)):
        ~invalid()
    checkRepConversionInvariants()

    if(!safeToSubtract(senderBalance, fxpValue) or !safeToAdd(senderDormantBalance, fxpValue) or !REPORTING.subtractRep(branch, senderIndex, fxpValue) or !REPORTING.addDormantRep(branch, senderIndex, fxpValue)):
        ~invalid()
    REPORTING.adjustActiveRep(branch, -fxpValue)
    MUTEX.release()
    return(1)

# Convert dormant rep to active rep
# error messages
    #  0: only one period behind, need to do penalizations for it
    # -1: sender's rep account didn't exist, just made one
    # -2: not in right part of period
    # -4: couldn't catchup automatically
    # -5: not enough rep
def convertToActiveRep(branch, fxpValue):
    MUTEX.acquire()
    checkInvariants(msg.sender)
    senderIndex = REPORTING.repIDToIndex(branch, msg.sender)
    senderBalance = REPORTING.balanceOfReporter(branch, msg.sender)
    senderActiveBalance = REPORTING.getRepBalance(branch, msg.sender)
    checkRepConversionInvariants()

    if(!safeToSubtract(senderBalance, fxpValue) or !safeToAdd(senderActiveBalance, fxpValue) or !REPORTING.subtractDormantRep(branch, senderIndex, fxpValue) or !REPORTING.addRep(branch, senderIndex, fxpValue)):
        ~invalid()
    REPORTING.adjustActiveRep(branch, fxpValue)
    MUTEX.release()
    return(1)

macro checkInvariants($account):
    refund()
    # auto increment vote period if needed
    INCREMENTPERIOD.incrementPeriodAfterReporting(branch)
    periodLength = BRANCHES.getPeriodLength(branch)
    votePeriod = BRANCHES.getVotePeriod(branch)
    lastPeriod = votePeriod - 1
    lastPeriodPenalized = 0
    lastPeriodPenalized = CONSENSUS.getPenalizedUpTo(branch, $account)
    delta = lastPeriod - lastPeriodPenalized
    # Rep cannot be simultaneously spent (transferred) and used to vote
    atFirstHalfOfPeriod()

    if(delta > 1 and CATCHUP.penalizationCatchup(branch, $account) != 1):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(-4)
    if(!CONSENSUS.getRepRedistributionDone(branch, $account)):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(0)

macro checkConversionDuringForkInvariants():
    child = BRANCHES.getMostRecentChild(branch)
    tooLateForChild = block.timestamp > (BRANCHES.getCreationDate(child) + ONE_MONTH)
    # If a user hasn't claimed rep on the child branch yet and it's a fork scenario, don't allow converting rep on the parent branch until they claim it
    if(!tooLateForChild and child and REPORTING.getReporterID(branch, REPORTING.repIDToIndex(child, msg.sender)) != msg.sender):
        if(!CLAIMINITIALREP.claimInitialRep(branch, child, call = delegate)):
            ~invalid()

macro checkRepConversionInvariants():
    # if the sender's rep. account doesn't exist, make one
    if(REPORTING.getReporterID(branch, senderIndex) != msg.sender):
        CONSENSUS.setPenalizedUpTo(branch, msg.sender, (votePeriod - 1))
        # if it's a forked branch have 1 month to claim, so a user cant make a new account on a new branch without at least trying to claim rep if this is a fork and the reporter was in the old branch [but hasn't claimed rep on the new branch yet]
        parent = BRANCHES.getParent(branch)
        tooLate = block.timestamp > (BRANCHES.getCreationDate(branch) + ONE_MONTH)
        reporterWasInOldBranch = REPORTING.getReporterID(parent, REPORTING.repIDToIndex(parent, msg.sender))
        if(parent and !tooLate and reporterWasInOldBranch):
            if(!CLAIMINITIALREP.claimInitialRep(parent, branch, call = delegate)):
                ~invalid()
        else:
            REPORTING.addReporter(branch, msg.sender)
        if(!isCallerWhitelisted()):
            MUTEX.release()
        return(-1)
    if(senderBalance < fxpValue or fxpValue <= 0):
        MUTEX.release()
        return(-5)
    checkConversionDuringForkInvariants()

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)