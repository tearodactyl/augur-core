# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

ORDERS = self.controller.lookup('orders')
extern orders: [checkHash:[int256,int256]:int256, commitOrder:[int256]:int256, fillOrder:[int256,int256,int256,int256]:int256, getAmount:[int256]:int256, getID:[int256]:int256, getOrder:[int256]:int256[], getOrderOwner:[int256]:int256, getPrice:[int256]:int256, getType:[int256]:int256, makeOrderHash:[int256,int256,int256]:int256, removeOrder:[int256]:int256, saveOrder:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, setController:[address]:int256, suicideFunds:[address]:_]

TRADE = self.controller.lookup('trade')
extern trade: [setController:[address]:int256, suicideFunds:[address]:_, trade:[int256,int256]:int256[]]

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

inset('../macros/refund.sem')

data controller

event tradeAvailableOrdersLogArrayReturn(returnArray: arr)

macro logArrayReturn($a):
    log(type = tradeAvailableOrdersLogArrayReturn, $a)
    return($a: arr)

# Minimum gas needed to execute the trade function.
# TODO update with profiled value from the new trade function
macro MINIMUM_GAS_NEEDED_TO_TRADE: 787421

# tradeAvailableOrders [fills the orderIDs in the orderIDs array with a balance at or above fxpMinimumOrderBalance]
# Errors:
#   -6: no available orders found
# @param amountTakerWants Number of shares to take (buy or sell).
# @param orderIDs Array of order IDs from which to pick one to fill.
# @param fxpMinimumOrderBalance Fill the first order that has a balance at or above this value.
# @return array [error code] or [response code, unfilled value, unfilled amount]
def init():
    self.controller = 0x0

def tradeAvailableOrders(orderIDs: arr, amountTakerWants, fxpMinimumOrderBalance):
    numOrders = len(orderIDs)
    originalBalance = amountTakerWants
    amountTakerWants = amountTakerWants
    i = 0
    # problem exists here where amounttakerwants can get too low resulting in a throw
    while(i < numOrders and msg.gas > MINIMUM_GAS_NEEDED_TO_TRADE and amountTakerWants):
        if(ORDERS.getAmount(orderIDs[i]) > fxpMinimumOrderBalance):
            tradeReturn = array(2)
            tradeReturn = TRADE.trade(orderIDs[i], amountTakerWants, call = delegate, outitems = 2)
            amountTakerWants = tradeReturn[1]
        i += 1
    if(originalBalance == amountTakerWants):
        logArrayReturn([-6])
    else:
        logArrayReturn([1, amountTakerWants])

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)